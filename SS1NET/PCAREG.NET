COMPILE;
DIRECTORY MASTER;
/****************************************************************************
pcareg
22/9/88

Blitter program address register

The register is loaded in byte chunks by pcwrL[0-2], or as a whole by
updpcL.  The selection between input data and adder output is given by 
run.

****************************************************************************/


MODULE PCAREG;

INPUTS	ADDQ_0,ADDQ_1,ADDQ_2,ADDQ_3,ADDQ_4,ADDQ_5,ADDQ_6,ADDQ_7,ADDQ_8,ADDQ_9,
   ADDQ_10,ADDQ_11,ADDQ_12,ADDQ_13,ADDQ_14,ADDQ_15,ADDQ_16,ADDQ_17,ADDQ_18,
   ADDQ_19,ID_0,ID_1,ID_2,ID_3,ID_4,ID_5,ID_6,ID_7,PCWRL_0,PCWRL_1,PCWRL_2,RUN,
   UPDPCL;
OUTPUTS	PCL_0,PCL_1,PCL_2,PCL_3,PCL_4,PCL_5,PCL_6,PCL_7,PCL_8,PCL_9,PCL_10,
   PCL_11,PCL_12,PCL_13,PCL_14,PCL_15,PCL_16,PCL_17,PCL_18,PCL_19;
LEVEL FUNCTION;
DEFINE

/* The load enables for the latches */

PCLD_0_(PCLDL_0) = AND2A(PCWRL_0,UPDPCL);
PCLD_1_(PCLDL_1) = AND2A(PCWRL_1,UPDPCL);
PCLD_2_(PCLDL_2) = AND2A(PCWRL_2,UPDPCL);

/* Multiplex between the adder output and the data bus */

RUNL_(RUNL) = N1C(RUN);
PMUX_0_(PCI_0) = AO2A(RUN,ADDQ_0,RUNL,ID_0);
PMUX_1_(PCI_1) = AO2A(RUN,ADDQ_1,RUNL,ID_1);
PMUX_2_(PCI_2) = AO2A(RUN,ADDQ_2,RUNL,ID_2);
PMUX_3_(PCI_3) = AO2A(RUN,ADDQ_3,RUNL,ID_3);
PMUX_4_(PCI_4) = AO2A(RUN,ADDQ_4,RUNL,ID_4);
PMUX_5_(PCI_5) = AO2A(RUN,ADDQ_5,RUNL,ID_5);
PMUX_6_(PCI_6) = AO2A(RUN,ADDQ_6,RUNL,ID_6);
PMUX_7_(PCI_7) = AO2A(RUN,ADDQ_7,RUNL,ID_7);
PMUX_8_(PCI_8) = AO2A(RUN,ADDQ_8,RUNL,ID_0);
PMUX_9_(PCI_9) = AO2A(RUN,ADDQ_9,RUNL,ID_1);
PMUX_10_(PCI_10) = AO2A(RUN,ADDQ_10,RUNL,ID_2);
PMUX_11_(PCI_11) = AO2A(RUN,ADDQ_11,RUNL,ID_3);
PMUX_12_(PCI_12) = AO2A(RUN,ADDQ_12,RUNL,ID_4);
PMUX_13_(PCI_13) = AO2A(RUN,ADDQ_13,RUNL,ID_5);
PMUX_14_(PCI_14) = AO2A(RUN,ADDQ_14,RUNL,ID_6);
PMUX_15_(PCI_15) = AO2A(RUN,ADDQ_15,RUNL,ID_7);
PMUX_16_(PCI_16) = AO2A(RUN,ADDQ_16,RUNL,ID_0);
PMUX_17_(PCI_17) = AO2A(RUN,ADDQ_17,RUNL,ID_1);
PMUX_18_(PCI_18) = AO2A(RUN,ADDQ_18,RUNL,ID_2);
PMUX_19_(PCI_19) = AO2A(RUN,ADDQ_19,RUNL,ID_3);

/* The address register */

PCLATCH_0_(PCL_0,PC_0) = FD1A(PCI_0,PCLDL_0);
PCLATCH_1_(PCL_1,PC_1) = FD1A(PCI_1,PCLDL_0);
PCLATCH_2_(PCL_2,PC_2) = FD1A(PCI_2,PCLDL_0);
PCLATCH_3_(PCL_3,PC_3) = FD1A(PCI_3,PCLDL_0);
PCLATCH_4_(PCL_4,PC_4) = FD1A(PCI_4,PCLDL_0);
PCLATCH_5_(PCL_5,PC_5) = FD1A(PCI_5,PCLDL_0);
PCLATCH_6_(PCL_6,PC_6) = FD1A(PCI_6,PCLDL_0);
PCLATCH_7_(PCL_7,PC_7) = FD1A(PCI_7,PCLDL_0);
PCLATCH_8_(PCL_8,PC_8) = FD1A(PCI_8,PCLDL_1);
PCLATCH_9_(PCL_9,PC_9) = FD1A(PCI_9,PCLDL_1);
PCLATCH_10_(PCL_10,PC_10) = FD1A(PCI_10,PCLDL_1);
PCLATCH_11_(PCL_11,PC_11) = FD1A(PCI_11,PCLDL_1);
PCLATCH_12_(PCL_12,PC_12) = FD1A(PCI_12,PCLDL_1);
PCLATCH_13_(PCL_13,PC_13) = FD1A(PCI_13,PCLDL_1);
PCLATCH_14_(PCL_14,PC_14) = FD1A(PCI_14,PCLDL_1);
PCLATCH_15_(PCL_15,PC_15) = FD1A(PCI_15,PCLDL_1);
PCLATCH_16_(PCL_16,PC_16) = FD1A(PCI_16,PCLDL_2);
PCLATCH_17_(PCL_17,PC_17) = FD1A(PCI_17,PCLDL_2);
PCLATCH_18_(PCL_18,PC_18) = FD1A(PCI_18,PCLDL_2);
PCLATCH_19_(PCL_19,PC_19) = FD1A(PCI_19,PCLDL_2);

END MODULE;
END COMPILE;
END;
