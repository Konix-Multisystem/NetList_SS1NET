COMPILE;
DIRECTORY MASTER;
/****************************************************************************
addradd
26/9/88

Address Adder

****************************************************************************/


MODULE ADDRADD;

INPUTS	ADDAM1,ADDA_0,ADDA_1,ADDA_2,ADDA_3,ADDA_4,ADDA_5,ADDA_6,ADDA_7,ADDA_8,
   ADDA_9,ADDA_10,ADDA_11,ADDA_12,ADDA_13,ADDA_14,ADDA_15,ADDA_16,ADDA_17,
   ADDA_18,ADDA_19,ADDBM1,ADDB_0,ADDB_1,ADDB_2,ADDB_3,ADDB_4,ADDB_5,ADDB_6,
   ADDB_7,ADDB_8,CARRYIN_0,CARRYIN_1,CINH6,CINH7,CINH15,HISIGN,VHISIGN;
OUTPUTS	ADDQM1,ADDQ_0,ADDQ_1,ADDQ_2,ADDQ_3,ADDQ_4,ADDQ_5,ADDQ_6,ADDQ_7,ADDQ_8,
   ADDQ_9,ADDQ_10,ADDQ_11,ADDQ_12,ADDQ_13,ADDQ_14,ADDQ_15,ADDQ_16,ADDQ_17,
   ADDQ_18,ADDQ_19,CARRYOUT;
LEVEL FUNCTION;
DEFINE

/* Invert control bits as required */

CINH6L_(CINH6L) = N1A(CINH6);
CINH7L_(CINH7L) = N1A(CINH7);
CINH15L_(CINH15L) = N1A(CINH15);

/* Add bits -1 to 6, using the carry in if required */

/*
ADDER0_(ADDQM1,ADDQ_0,ADDQ_1,ADDQ_2,CRY_0) = FULLADD4(ADDAM1,ADDA_0,ADDA_1,
   ADDA_2,ADDBM1,ADDB_0,ADDB_1,ADDB_2,CARRYIN_0);
ADDER1_(ADDQ_3,ADDQ_4,ADDQ_5,ADDQ_6,CRY_1) = FULLADD4(ADDA_3,ADDA_4,ADDA_5,
   ADDA_6,ADDB_3,ADDB_4,ADDB_5,ADDB_6,CRY_0);
*/
ADDER_0_(CRY_1,ADDQ_6,ADDQ_5,ADDQ_4,ADDQ_3,ADDQ_2,ADDQ_1,ADDQ_0,ADDQM1)
   = FA8(CARRYIN_0, ADDA_6, ADDA_5, ADDA_4, ADDA_3, ADDA_2, ADDA_1, ADDA_0, 
   ADDAM1,ADDB_6,ADDB_5,ADDB_4,ADDB_3,ADDB_2,ADDB_1,ADDB_0,ADDBM1);

/* Inhibit carry and inject sign if required from 6-7 */

CRYINH6L_(CRYL_2) = AO2C(CINH6,CARRYIN_1,CINH6L,CRY_1);
CRY2INV_(CRY_2) = N1C(CRYL_2);

/* Add bit 7
   The carry output from this stage is used to generate the borrow term
   for line draw computattion. */

ADDER2_(ADDQ_7,CARRYOUT) = FULLADD(ADDA_7,ADDB_7,CRY_2);

/* Inhibit carry and inject carry if required from 7-8. */

CRYINH3L_(CRYL_3) = AO2C(CINH7,CARRYIN_1,CINH7L,CARRYOUT);
CRY3INV_(CRY_3) = N1C (CRYL_3);

/* Perform the addition on bits 8-15.  Note that the B input is the same for 
   bits 9-15, and is given by hisign.  */

/*
ADDER3_(ADDQ_8,ADDQ_9,ADDQ_10,ADDQ_11,CRY_4) = FULLADD4(ADDA_8,ADDA_9,ADDA_10,
   ADDA_11,ADDB_8,HISIGN,HISIGN,HISIGN,CRY_3);
ADDER4_(ADDQ_12,ADDQ_13,ADDQ_14,ADDQ_15,CRY_5) = FULLADD4(ADDA_12,ADDA_13,
   ADDA_14,ADDA_15,HISIGN,HISIGN,HISIGN,HISIGN,CRY_4);
*/
ADDER_3_(CRY_5,ADDQ_15,ADDQ_14,ADDQ_13,ADDQ_12,ADDQ_11,ADDQ_10,ADDQ_9,ADDQ_8)
   = FA8(CRY_3,ADDA_15,ADDA_14,ADDA_13, ADDA_12,ADDA_11,ADDA_10, ADDA_9,
   ADDA_8,HISIGN,HISIGN,HISIGN,HISIGN,HISIGN,HISIGN,HISIGN,ADDB_8);

/* Inhibit carry from bits 15 to 16 if required */

CRYINH15_(CRY_6) = AND2C(CINH15L,CRY_5);

/* Perform the addition on bits 17-19 */

ADDER5_(CRY_7,ADDQ_19,ADDQ_18,ADDQ_17,ADDQ_16) = FA4C(CRY_6,ADDA_19,ADDA_18,
   ADDA_17,ADDA_16,VHISIGN,VHISIGN,VHISIGN,VHISIGN);

END MODULE;

END COMPILE;
END;
