/***************************************************************************
SS.NET
3/11/88

The slipstream top level file for LSI Logic.

***************************************************************************/

COMPILE;
DIRECTORY MASTER;

MODULE SS;

INPUTS	XAD_0, XAD_1, XAD_2, XAD_3, XAD_4, XAD_5, XAD_6, XAD_7, XA_8, XA_9, 
   XA_10, XA_11, XA_12, XA_13, XA_14, XA_15, XD_8, XD_9, XD_10, XD_11, XD_12, 
   XD_13, XD_14, XD_15, XVSYNCL, XHSYNCL, XJOYL_0, XJOYL_1, XJOYL_2, XDSP_IO,
   XAS_16, XAS_17, XAS_18, XAS_19, XRESET, XIOM, XALE, XINTA, XHLDA, 
   XXTAL, XAI_0, XAI_1, XAI_2, XLPL, XTESTPIN, XRDL, XWRL; 

OUTPUTS	XAD_0, XAD_1, XAD_2, XAD_3, XAD_4, XAD_5, XAD_6, XAD_7, XA_8, XA_9, 
   XA_10, XA_11, XA_12, XA_13, XA_14, XA_15, XD_8, XD_9, XD_10, XD_11, XD_12, 
   XD_13, XD_14, XD_15, XVSYNCL, XHSYNCL, XJOYL_0, XJOYL_1, XJOYL_2, XDSP_IO, 
   XINTR, XA_0, XA_1, XA_2, XA_3, XA_4, XA_5, XA_6, XA_7, XA_16, 
   XA_17, XPCLK, XHOLD, XSCEL_0, XSCEL_1, XWEL, XCSL_0, XCSL_1, XR_0, XR_1, 
   XR_2, XR_3, XG_0, XG_1, XG_2, XG_3, XB_0, XB_1, XB_2, XB_3, XCHROMA, XLEFTL, 
   XLEFTH, XRIGHTL, XRIGHTH, XINC, XAISEL, XOEL, XCASL, XXTALO, XGPIOL_0, 
   XGPIOL_1;

LEVEL FUNCTION;
DEFINE


/* Random Logic Blocks
   ------------------- */

/* Video controller and memory interface module */

VID_(A_0,A_1,A_2,A_3,A_4,A_5,A_6,A_7,A_8,A_9,A_10,A_11,A_12,A_13,A_14,A_15,
   A_16,A_17,A_18,A_19,D_0,D_1,D_2,D_3,D_4,D_5,D_6,D_7,D_8,D_9,D_10,D_11,D_12,
   D_13,D_14,D_15,PALD_0,PALD_1,PALD_2,PALD_3,PALD_4,PALD_5,PALD_6,PALD_7,
   PALD_8,PALD_9,PALD_10,PALD_11,PALD_12,PALD_13,PALD_14,PALD_15,VAD_0,VAD_1,
   VAD_2,VAD_3,VAD_4,VAD_5,VAD_6,VAD_7,ADEN,VAL_0,VAL_1,VAL_2,VAL_3,VAL_4,
   VAL_5,VAL_6,VAL_7,VA_8,VA_9,VA_10,VA_11,VA_12,VA_13,VA_14,VA_15,AEN,VAL_16,
   VAL_17,DEN,VD_8,VD_9,VD_10,VD_11,VD_12,VD_13,VD_14,VD_15,VRDL,VWRL,INTL,
   VSYNC,HSYNC,TESTENL,PCLKL,HOLDL,SCE_0,SCE_1,WE,DWE,CS_0,CS_1,RL_0,RL_1,RL_2,
   RL_3,GL_0,GL_1,GL_2,GL_3,BL_0,BL_1,BL_2,BL_3,CHROMAL,JOYL_0,JOYL_1,JOYL_2,
   OE,CAS,IORDL,IOWRL,BCSL,DCSL,ICCLK,WAITL,RDL,WRL,PA_0,PA_1,PA_2,PA_3,PA_4,
   PA_5,PA_6,PA_7,POE,PWE,PCS,AISEL,INCL,DSP_EN,GPIOL_0,GPIOL_1,DQCLK)
 = VID (A_0,A_1,A_2,A_3,A_4,A_5,A_6,A_7,A_8,A_9,A_10,A_11,A_12,A_13,A_14,A_15,
   A_16,A_17,A_18,A_19,D_0,D_1,D_2,D_3,D_4,D_5,D_6,D_7,D_8,D_9,D_10,D_11,D_12,
   D_13,D_14,D_15,PALD_0,PALD_1,PALD_2,PALD_3,PALD_4,PALD_5,PALD_6,PALD_7,
   PALD_8,PALD_9,PALD_10,PALD_11,PALD_12,PALD_13,PALD_14,PALD_15,VADL_0,
   VADL_1,VADL_2,VADL_3,VADL_4,VADL_5,VADL_6,VADL_7,VAL_8,VAL_9,VAL_10,VAL_11,
   VAL_12,VAL_13,VAL_14,VAL_15,VDL_8,VDL_9,VDL_10,VDL_11,VDL_12,VDL_13,VDL_14,
   VDL_15,VRD,VWR,VLOCK,HLOCK,PALL,PSRAML,ASL_16,ASL_17,ASL_18,ASL_19,RESETL,
   IOML,ALEL,INTAL,BMREQ,DMREQ,HLDAL,XTALL, AIL_0,AIL_1,AIL_2,LP,BHOLDL,
   BWORD,DWORD,FASTL,BRD,DRD,BWR,DWR,CCLK);

/* Blitter module */

BLIT_(A_0,A_1,A_2,A_3,A_4,A_5,A_6,A_7,A_8,A_9,A_10,A_11,A_12,A_13,A_14,A_15,
   A_16,A_17,A_18,A_19,D_0,D_1,D_2,D_3,D_4,D_5,D_6,D_7,D_8,D_9,D_10,D_11,D_12,
   D_13,D_14,D_15,BMREQ,BRD,BWR,BWORD,DSPBAKL,BHOLDL,TESTWRL)
 = BLIT(A_0,A_1,A_2,A_3,
   A_4,A_5,A_6,A_7,A_8,A_9,A_10,A_11,A_12,A_13,A_14,A_15,A_16,A_17,A_18,A_19,
   D_0,D_1,D_2,D_3,D_4,D_5,D_6,D_7,D_8,D_9,D_10,D_11,D_12,D_13,D_14,D_15,
   RESETL,HLDAL,DSPBRQL,INTL,IORDL,IOWRL,BCSL,CCLK,WAITL);

/* DSP module */

DSP_(A_0,A_1,A_2,A_3,A_4,A_5,A_6,A_7,A_8,A_9,A_10,A_11,A_12,A_13,A_14,A_15,A_16,
   A_17,A_18,A_19,D_0,D_1,D_2,D_3,D_4,D_5,D_6,D_7,D_8,D_9,D_10,D_11,D_12,D_13,
   D_14,D_15,DD_0,DD_1,DD_2,DD_3,DD_4,DD_5,DD_6,DD_7,DD_8,DD_9,DD_10,DD_11,
   DD_12,DD_13,DD_14,DD_15,PD_0,PD_1,PD_2,PD_3,PD_4,PD_5,PD_6,PD_7,PD_8,PD_9,
   PD_10,PD_11,PD_12,PD_13,PD_14,PD_15,DSPBRQL,LEFTL,LEFTH,RIGHTL,RIGHTH,
   DMREQ,DRD,DWR,DWORD,PC_0,PC_1,PC_2,PC_3,PC_4,PC_5,PC_6,PC_7,DA_0,DA_1,DA_2,
   DA_3,DA_4,DA_5,DA_6,DA_7,PRAMEN,PRAMWR,DRAMEN,DRAMWR,ROMEN,X_0,X_1,X_2,X_3,
   X_4,X_5,X_6,X_7,X_8,X_9,X_10,X_11,X_12,X_13,X_14,X_15,MZR_0,MZR_1,MZR_2,
   MZR_3,MZR_4,MZR_5,MZR_6,MZR_7,MZR_8,MZR_9,MZR_10,MZR_11,MZR_12,MZR_13,MZR_14,
   MZR_15,MZR_16,MZR_17,MZR_18,MZR_19,MZR_20,MZR_21,MZR_22,MZR_23,MZR_24,MZR_25,
   MZR_26,MZR_27,MZR_28,MZR_29,MZR_30,MZR_31,MZR_32,MZR_33,MZR_34,MZR_35,TCX,
   TCY,CINL,M,S_0,S_1,S_2,S_3,DSP_OUT)
 = DSP(A_0,A_1,A_2,A_3,A_4,A_5,A_6,A_7,A_8,A_9,A_10,A_11,A_12,A_13,A_14,
   A_15,A_16,A_17,A_18,A_19,D_0,D_1,D_2,D_3,D_4,D_5,D_6,D_7,D_8,D_9,D_10,D_11,
   D_12,D_13,D_14,D_15,DD_0,DD_1,DD_2,DD_3,DD_4,DD_5,DD_6,DD_7,DD_8,DD_9,DD_10,
   DD_11,DD_12,DD_13,DD_14,DD_15,PD_0,PD_1,PD_2,PD_3,PD_4,PD_5,PD_6,PD_7,PD_8,
   PD_9,PD_10,PD_11,PD_12,PD_13,PD_14,PD_15,RESETL,DSPBAKL,DCSL,CCLK,WAITL,
   IOML,RDL,DWE,AZ_0,AZ_1,AZ_2,AZ_3,AZ_4,AZ_5,AZ_6,AZ_7,AZ_8,AZ_9,AZ_10,AZ_11,
   AZ_12,AZ_13,AZ_14,AZ_15,COUTL,MZ_0,MZ_1,MZ_2,MZ_3,MZ_4,MZ_5,MZ_6,MZ_7,MZ_8,
   MZ_9,MZ_10,MZ_11,MZ_12,MZ_13,MZ_14,MZ_15,MZ_16,MZ_17,MZ_18,MZ_19,MZ_20,
   MZ_21,MZ_22,MZ_23,MZ_24,MZ_25,MZ_26,MZ_27,MZ_28,MZ_29,MZ_30,MZ_31,MZ_32,
   MZ_33,MZ_34,MZ_35,MZ_36,DSP_IN,DQCLK);


/* Clock buffer */

CCLK_ (CCLK) = B1I (ICCLK);

/* Test and Control Logic
   ----------------------
The following logic is provided at the top level to control testing of the
mega cells, and to allow the LSI parametric test modes to be performed.
This requires that the functions of the pads be changed in test mode, but
a restriction is observed that no "real" signal may be dalyed by more than
one gate, so that the test logic does not degrade system performance too
much.
*/

/* The test control register - this has the following bits:
	0	enable scan test
	1	disable all tri-states
	2	disable RAM cells
	3	test ALU
	4	disable data bus tri-states if AI_2 is 0
*/

/* Writes are only permitted to it when TESTPIN is inactive */

TPININV_ (TESTPIN) = N1A (TESTPINL);
TESTWR_ (TESTWR) = NR2A (TESTWRL, TESTPIN);

SCANEN_(SCANEN, SCANENL) = LD1A (D_0, TESTWR);
TRIDIS_(TRIDIS, TRIDISL) = LD1A (D_1, TESTWR);
RAMDIS_(RAMDIS, RAMDISL) = LD1A (D_2, TESTWR);
ALUTST_(ALUTST, ALUTSTL) = LD1A (D_3, TESTWR);
DATDIS_(DATDIS, DATDISL) = LD1A (D_4, TESTWR);

/* Generate a special disable signal for the data bus which is active
on the condition TRIDIS + (DATDIS . AIL_2) */

DDIST_(DDIST) = ND2A (DATDIS, AIL_2);
DDIS_(DDIS) = ND2A (DDIST, TRIDISL);

/* Scan test - the inputs are common to all the scan devices, and the outputs 
appear on separate pins.

	XAS_16	SCK
	XAD_0	SI
	XAS_17	TWE
	XAS_18	TOCK
	XAD_1	TCS

	XA_0	DSP Program RAM SO
	XA_1	DSP Data RAM SO
	XA_2	DSP Data ROM SO
	XA_3	Palette RAM SO
*/

SCANSCK_(SCANSCK) = N1A(ASL_16);
SCANSI_(SCANSI) = N1A(VADL_0);
SCANTWE_(SCANTWE) = N1A(ASL_17);
SCANTOCK_(SCANTOCK) = N1A(ASL_18);
SCANTCS_(SCANTCS) = N1A(VADL_1);

/* Multiplex the shift outs with the actual address lines */

A0TMUX_(VA_0) = TMUX2 (VAL_0, PRAMSO, SCANEN);
A1TMUX_(VA_1) = TMUX2 (VAL_1, DRAMSO, SCANEN);
A2TMUX_(VA_2) = TMUX2 (VAL_2, DROMSO, SCANEN);
A3TMUX_(VA_3) = TMUX2 (VAL_3, VRAMSO, SCANEN);


/* The vid module provides its own chip select, gate this with ramdis */

PALCS_(PALCS) = AND2A (PCS, RAMDISL);

/* When the test pin is asserted reset is disabled (to prevent clearing of 
the test control register */

RESET_ (RESETL) = ND2C (RESETI, TESTPINL);

/* The parametric input test, controlled by TESTPIN, is viewed on the
HOLD output. */

HOLDTMUX_(HOLD) = MX21LB (TESTI_46, HOLDL, TESTPINL);

/* The ALU is tested by connecting it up to pins directly.

	A0-15	AD0-7 and A8-15
	B0-15	D8-15, AS16-19 and RD,WR,HSYNC and VSYNC
	S0-3	JOY0-2 and IOM
	CIN	ALE
	M	INTA

	F0-15	R0-3, G0-3, B0-3 and A4-7
	X	SCEL0
	Y	SCEL1
	CON	CSL0
	AEB	CSL1
*/

ALUA0_(ALUA0) = TMUX1 (X_0, VADL_0, ALUTST);
ALUA1_(ALUA1) = TMUX1 (X_1, VADL_1, ALUTST);
ALUA2_(ALUA2) = TMUX1 (X_2, VADL_2, ALUTST);
ALUA3_(ALUA3) = TMUX1 (X_3, VADL_3, ALUTST);
ALUA4_(ALUA4) = TMUX1 (X_4, VADL_4, ALUTST);
ALUA5_(ALUA5) = TMUX1 (X_5, VADL_5, ALUTST);
ALUA6_(ALUA6) = TMUX1 (X_6, VADL_6, ALUTST);
ALUA7_(ALUA7) = TMUX1 (X_7, VADL_7, ALUTST);
ALUA8_(ALUA8) = TMUX1 (X_8, VAL_8, ALUTST);
ALUA9_(ALUA9) = TMUX1 (X_9, VAL_9, ALUTST);
ALUA10_(ALUA10) = TMUX1 (X_10, VAL_10, ALUTST);
ALUA11_(ALUA11) = TMUX1 (X_11, VAL_11, ALUTST);
ALUA12_(ALUA12) = TMUX1 (X_12, VAL_12, ALUTST);
ALUA13_(ALUA13) = TMUX1 (X_13, VAL_13, ALUTST);
ALUA14_(ALUA14) = TMUX1 (X_14, VAL_14, ALUTST);
ALUA15_(ALUA15) = TMUX1 (X_15, VAL_15, ALUTST);
ALUB0_(ALUB0) = TMUX1 (DD_0, VDL_8, ALUTST);
ALUB1_(ALUB1) = TMUX1 (DD_1, VDL_9, ALUTST);
ALUB2_(ALUB2) = TMUX1 (DD_2, VDL_10, ALUTST);
ALUB3_(ALUB3) = TMUX1 (DD_3, VDL_11, ALUTST);
ALUB4_(ALUB4) = TMUX1 (DD_4, VDL_12, ALUTST);
ALUB5_(ALUB5) = TMUX1 (DD_5, VDL_13, ALUTST);
ALUB6_(ALUB6) = TMUX1 (DD_6, VDL_14, ALUTST);
ALUB7_(ALUB7) = TMUX1 (DD_7, VDL_15, ALUTST);
ALUB8_(ALUB8) = TMUX1 (DD_8, ASL_16, ALUTST);
ALUB9_(ALUB9) = TMUX1 (DD_9, ASL_17, ALUTST);
ALUB10_(ALUB10) = TMUX1 (DD_10, ASL_18, ALUTST);
ALUB11_(ALUB11) = TMUX1 (DD_11, ASL_19, ALUTST);
ALUB12_(ALUB12) = TMUX1 (DD_12, VRD, ALUTST);
ALUB13_(ALUB13) = TMUX1 (DD_13, VWR, ALUTST);
ALUB14_(ALUB14) = TMUX1 (DD_14, HLOCK, ALUTST);
ALUB15_(ALUB15) = TMUX1 (DD_15, VLOCK, ALUTST);
ALUS0_(ALUS0) = TMUX1 (S_0, PALL, ALUTST);
ALUS1_(ALUS1) = TMUX1 (S_1, PSRAML, ALUTST);
ALUS2_(ALUS2) = TMUX1 (S_2, FASTL, ALUTST);
ALUS3_(ALUS3) = TMUX1 (S_3, IOML, ALUTST);
ALUCINL_(ALUCINL) = TMUX1 (CINL,ALEL, ALUTST);
ALUM_(ALUM) = TMUX1 (M,INTAL, ALUTST);

ALUF0_(R_0) = TMUX2 (RL_0, AZ_0, ALUTST);
ALUF1_(R_1) = TMUX2 (RL_1, AZ_1, ALUTST);
ALUF2_(R_2) = TMUX2 (RL_2, AZ_2, ALUTST);
ALUF3_(R_3) = TMUX2 (RL_3, AZ_3, ALUTST);
ALUF4_(G_0) = TMUX2 (GL_0, AZ_4, ALUTST);
ALUF5_(G_1) = TMUX2 (GL_1, AZ_5, ALUTST);
ALUF6_(G_2) = TMUX2 (GL_2, AZ_6, ALUTST);
ALUF7_(G_3) = TMUX2 (GL_3, AZ_7, ALUTST);
ALUF8_(B_0) = TMUX2 (BL_0, AZ_8, ALUTST);
ALUF9_(B_1) = TMUX2 (BL_1, AZ_9, ALUTST);
ALUF10_(B_2) = TMUX2 (BL_2, AZ_10, ALUTST);
ALUF11_(B_3) = TMUX2 (BL_3, AZ_11, ALUTST);
ALUF12_(VA_4) = TMUX2 (VAL_4, AZ_12, ALUTST);
ALUF13_(VA_5) = TMUX2 (VAL_5, AZ_13, ALUTST);
ALUF14_(VA_6) = TMUX2 (VAL_6, AZ_14, ALUTST);
ALUF15_(VA_7) = TMUX2 (VAL_7, AZ_15, ALUTST);
ALUX_(SCEL_0) = TMUX2 (SCE_0, ALUX, ALUTST);
ALUY_(SCEL_1) = TMUX2 (SCE_1, ALUY, ALUTST);
ALUCOUTL_(CSL_0) = TMUX2 (CS_0, COUTL, ALUTST);
ALUAEB_(CSL_1) = TMUX2 (CS_1, ALUAEB, ALUTST);

/* Mega Cell Blocks
   ---------------- */

/* DSP Program RAM, 256x16 */

PROGRAM_(PRAMSO, PD_0, PD_1, PD_2, PD_3, PD_4, PD_5, PD_6, PD_7, PD_8, PD_9, 
	PD_10, PD_11, PD_12, PD_13, PD_14, PD_15) 
  = MBRA14AA (PRAMWR, NC/1/, RAMDISL, NC/1/, NC/1/, PRAMEN, 
	SCANSCK, SCANSI, SCANEN, SCANTWE, SCANTOCK, SCANTCS,
	PD_0, PD_1, PD_2, PD_3, PD_4, PD_5, 
	PD_6, PD_7, PD_8, PD_9, PD_10, PD_11, PD_12, PD_13, PD_14, PD_15, 
	PC_0, PC_1, PC_2, PC_3, PC_4, PC_5, PC_6, PC_7);

/* DSP Data RAM, 128x16 */

DATARAM_(DRAMSO, DD_0, DD_1, DD_2, DD_3, DD_4, DD_5, DD_6, DD_7, DD_8, DD_9, 
	DD_10, DD_11, DD_12, DD_13, DD_14, DD_15) 
  = MBRA30AA (DRAMWR, NC/1/, RAMDISL, NC/1/, NC/1/, DRAMEN, 
	SCANSCK, SCANSI, SCANEN, SCANTWE, SCANTOCK, SCANTCS,
	DD_0, DD_1, DD_2, DD_3, DD_4, DD_5, 
	DD_6, DD_7, DD_8, DD_9, DD_10, DD_11, DD_12, DD_13, DD_14, DD_15, 
	DA_0, DA_1, DA_2, DA_3, DA_4, DA_5, DA_6);

/* DSP Data ROM, 256x16 used, 256x24 actual */

DATAROM_(DROMSO, DUMMY_23, DUMMY_22, DUMMY_21, DUMMY_20, DUMMY_19, DUMMY_18, 
	DUMMY_17, DUMMY_16, DD_15, DD_14, DD_13, DD_12, DD_11, DD_10, DD_9, 
	DD_8, DD_7, DD_6, DD_5, DD_4, DD_3, DD_2, DD_1, DD_0)
  = TBR006AA (SCANSCK, NC/1/, SCANTOCK, NC/1/, SCANEN, SCANSI, ROMEN,
	DA_7, DA_6, DA_5, DA_4, DA_3, DA_2, DA_1, DA_0);

/* DSP Multiplier-accumulator, 16x16 with 36-bit addend */

MULTIPLIER_(MZ_36, MZ_35, MZ_34, MZ_33, MZ_32, MZ_31, MZ_30, MZ_29, MZ_28, 
	MZ_27, MZ_26, MZ_25, MZ_24, MZ_23, MZ_22, MZ_21, MZ_20, MZ_19, MZ_18, 
	MZ_17, MZ_16, MZ_15, MZ_14, MZ_13, MZ_12, MZ_11, MZ_10, MZ_9, MZ_8, 
	MZ_7, MZ_6, MZ_5, MZ_4, MZ_3, MZ_2, MZ_1, MZ_0)
 = DMB2212A (X_15, X_14, X_13, X_12, X_11, X_10, X_9, X_8, X_7, X_6, X_5, X_4, 
	X_3, X_2, X_1, X_0, DD_15, DD_14, DD_13, DD_12, DD_11, DD_10, DD_9, 
	DD_8, DD_7, DD_6, DD_5, DD_4, DD_3, DD_2, DD_1, DD_0, MZR_35, MZR_34, 
	MZR_33, MZR_32, MZR_31, MZR_30, MZR_29, MZR_28, MZR_27, MZR_26, 
	MZR_25, MZR_24, MZR_23, MZR_22, MZR_21, MZR_20, MZR_19, MZR_18, 
	MZR_17, MZR_16, MZR_15, MZR_14, MZR_13, MZR_12, MZR_11, MZR_10, 
	MZR_9, MZR_8, MZR_7, MZR_6, MZR_5, MZR_4, MZR_3, MZR_2, MZR_1, 
	MZR_0, TCX, TCY);

/* DSP ALU, 16 bit, 74181 type */

ALU_(ALUX, ALUY, COUTL, AZ_15, AZ_14, AZ_13, AZ_12, AZ_11, AZ_10, AZ_9, AZ_8,
        AZ_7, AZ_6, AZ_5, AZ_4, AZ_3, AZ_2, AZ_1, AZ_0, ALUAEB)
 = DFT1811A (ALUS3, ALUS2, ALUS1, ALUS0, ALUA15, ALUA14, ALUA13, 
	ALUA12, ALUA11, ALUA10, ALUA9, ALUA8, ALUA7, ALUA6, ALUA5, 
	ALUA4, ALUA3, ALUA2, ALUA1, ALUA0, ALUB15, ALUB14, ALUB13, 
	ALUB12, ALUB11, ALUB10, ALUB9, ALUB8, ALUB7, ALUB6, ALUB5, 
	ALUB4, ALUB3, ALUB2, ALUB1, ALUB0, ALUCINL, ALUM);

/* Video Palette RAM, 256x16 */

PALRAM_(VRAMSO, PALD_0, PALD_1, PALD_2, PALD_3, PALD_4, PALD_5, PALD_6, 
	PALD_7, PALD_8, PALD_9, PALD_10, PALD_11, PALD_12, PALD_13, PALD_14, 
	PALD_15) 
  = MBRA14AA (PWE, NC/1/, PALCS, NC/1/, NC/1/, POE, 
	SCANSCK, SCANSI, SCANEN, SCANTWE, SCANTOCK, SCANTCS,
	PALD_0, PALD_1, PALD_2, PALD_3, PALD_4, PALD_5, PALD_6, PALD_7,
	PALD_8, PALD_9, PALD_10, PALD_11, PALD_12, PALD_13, PALD_14, PALD_15, 
	PA_0, PA_1, PA_2, PA_3, PA_4, PA_5, PA_6, PA_7);


/* The Input and Output Pads
   ------------------------- */
/* WARNING - Everything is 4mA drive, check for actual requirements */

/* Processor multiplexed address and data bus */

AD_0_(XAD_0, VADL_0, TESTI_26) = &BD4TNR (XAD_0, VAD_0, DDIS, ADEN, TESTI_25);
AD_1_(XAD_1, VADL_1, TESTI_24) = &BD4TNR (XAD_1, VAD_1, DDIS, ADEN, TESTI_23);
AD_2_(XAD_2, VADL_2, TESTI_23) = &BD4TNR (XAD_2, VAD_2, DDIS, ADEN, TESTI_22);
AD_3_(XAD_3, VADL_3, TESTI_22) = &BD4TNR (XAD_3, VAD_3, DDIS, ADEN, TESTI_21);
AD_4_(XAD_4, VADL_4, TESTI_20) = &BD4TNR (XAD_4, VAD_4, DDIS, ADEN, TESTI_19);
AD_5_(XAD_5, VADL_5, TESTI_18) = &BD4TNR (XAD_5, VAD_5, DDIS, ADEN, TESTI_17);
AD_6_(XAD_6, VADL_6, TESTI_16) = &BD4TNR (XAD_6, VAD_6, DDIS, ADEN, TESTI_15);
AD_7_(XAD_7, VADL_7, TESTI_15) = &BD4TNR (XAD_7, VAD_7, DDIS, ADEN, TESTI_14);

/* Processor address bus */

A_8_(XA_8, VAL_8, TESTI_13) = &BD4TNR (XA_8, VA_8, TRIDIS, AEN, TESTI_12);
A_9_(XA_9, VAL_9, TESTI_12) = &BD4TNR (XA_9, VA_9, TRIDIS, AEN, TESTI_11);
A_10_(XA_10, VAL_10, TESTI_11) = &BD4TNR (XA_10, VA_10, TRIDIS, AEN, TESTI_10);
A_11_(XA_11, VAL_11, TESTI_9) = &BD4TNR (XA_11, VA_11, TRIDIS, AEN, TESTI_8);
A_12_(XA_12, VAL_12, TESTI_7) = &BD4TNR (XA_12, VA_12, TRIDIS, AEN, TESTI_6);
A_13_(XA_13, VAL_13, TESTI_5) = &BD4TNR (XA_13, VA_13, TRIDIS, AEN, TESTI_4);
A_14_(XA_14, VAL_14, TESTI_3) = &BD4TNR (XA_14, VA_14, TRIDIS, AEN, TESTI_2);
A_15_(XA_15, VAL_15, TESTI_2) = &BD4TNR (XA_15, VA_15, TRIDIS, AEN, TESTI_1);

/* High byte of the data bus */

D_8_(XD_8, VDL_8, TESTI_36) = &BD4TNR (XD_8, VD_8, DDIS, DEN, TESTI_35);
D_9_(XD_9, VDL_9, TESTI_35) = &BD4TNR (XD_9, VD_9, DDIS, DEN, TESTI_34);
D_10_(XD_10, VDL_10, TESTI_34) = &BD4TNR (XD_10, VD_10, DDIS, DEN, TESTI_33);
D_11_(XD_11, VDL_11, TESTI_33) = &BD4TNR (XD_11, VD_11, DDIS, DEN, TESTI_32);
D_12_(XD_12, VDL_12, TESTI_32) = &BD4TNR (XD_12, VD_12, DDIS, DEN, TESTI_31);
D_13_(XD_13, VDL_13, TESTI_31) = &BD4TNR (XD_13, VD_13, DDIS, DEN, TESTI_30);
D_14_(XD_14, VDL_14, TESTI_30) = &BD4TNR (XD_14, VD_14, DDIS, DEN, TESTI_29);
D_15_(XD_15, VDL_15, TESTI_29) = &BD4TNR (XD_15, VD_15, DDIS, DEN, TESTI_28);

/* Processor control signals */

RDL_(VRD, TESTI_14) = &TLCHN (XRDL, TESTI_13);
WRL_(VWR, TESTI_19) = &TLCHN (XWRL, TESTI_18);

INT_(INT) = N1A (INTL);
INTR_(XINTR) = &BT4OS (INT, TRIDISL);
IOM_(IOML, TESTI_21) = &TLCHN (XIOM, TESTI_20);
ALE_(ALEL, TESTI_25) = &TLCHN (XALE, TESTI_24);
INTA_(INTAL, TESTI_27) = &TLCHN (XINTA, TESTI_26);
HLDA_(HLDAL, TESTI_17) = &TLCHN (XHLDA, TESTI_16);

/* Processor multiplexed address and status bus */

AS_16_(ASL_16, TESTI_4) = &TLCHN (XAS_16, TESTI_3);
AS_17_(ASL_17, TESTI_6) = &TLCHN (XAS_17, TESTI_5);
AS_18_(ASL_18, TESTI_8) = &TLCHN (XAS_18, TESTI_7);
AS_19_(ASL_19, TESTI_10) = &TLCHN (XAS_19, TESTI_9);

/* Video synchronisation signals */

XVSYNC_(XVSYNCL, VLOCK, TESTI_45)
	= &BD4TNOD (XVSYNCL, TRIDIS, VSYNC, TESTI_44);
XHSYNC_(XHSYNCL, HLOCK, TESTI_46) 
	= &BD4TNOD (XHSYNCL, TRIDIS, HSYNC, TESTI_45);

/* System IO */

JOYL_0_(XJOYL_0, PALL, TESTI_37)
	= &BD4TNR (XJOYL_0, JOYL_0, TRIDIS, TESTENL, TESTI_36);
JOYL_1_(XJOYL_1, PSRAML, TESTI_38)
	= &BD4TNR (XJOYL_1, JOYL_1, TRIDIS, TESTENL, TESTI_37);
JOYL_2_(XJOYL_2, FASTL, TESTI_39)
	= &BD4TNR (XJOYL_2, JOYL_2, TRIDIS, TESTENL, TESTI_38);

/* Test input for parametric input pin test */

TESTPIN_(TESTPINL, TESTPINPO) = &IBUFND (XTESTPIN, NC/1/);

/* System reset */

RESETPIN_(RESETI, TESTI_28) = &SCHMITC (XRESET, TESTI_27);

/* Crystal oscillator and buffer */

XTALPAD_(XXTALO, XTALLI, TESTI_1) = OSC10SCN (XXTAL, NC/1/);
XTALBUF_(XTALL) = B1I (XTALLI);

/* Analogue ramp inputs */

AI_0_(AIL_0, TESTI_41) = &SCHMITCN (XAI_0, TESTI_40);
AI_1_(AIL_1, TESTI_42) = &SCHMITCN (XAI_1, TESTI_41);
AI_2_(AIL_2, TESTI_43) = &SCHMITCN (XAI_2, TESTI_42);

/* Analogue input multiplexer select */

AISEL_(XAISEL) = &B4R (AISEL);

/* Light-pen input */

LP_(LP, TESTI_44) = &IBUFN (XLPL, TESTI_43);

/* Address bus outputs */

AL_16_(VA_16) = N1A (VAL_16);
AL_17_(VA_17) = N1A (VAL_17);
A_0_(XA_0) = &B4 (VA_0);
A_1_(XA_1) = &B4 (VA_1);
A_2_(XA_2) = &B4 (VA_2);
A_3_(XA_3) = &B4 (VA_3);
A_4_(XA_4) = &B4 (VA_4);
A_5_(XA_5) = &B4 (VA_5);
A_6_(XA_6) = &B4 (VA_6);
A_7_(XA_7) = &B4 (VA_7);
A_16_(XA_16) = &B4 (VA_16);
A_17_(XA_17) = &B4R (VA_17);

/* Processor control signals */

PCLK_(XPCLK) = &B4 (PCLKL);
HOLD_(XHOLD) = &B4R (HOLD);

/* Memory control signals */

SCEL_0_(XSCEL_0) = &B4 (SCEL_0);
SCEL_1_(XSCEL_1) = &B4 (SCEL_1);
WE_(WEL) = N1B (WE);
WEL_(XWEL) = &B4 (WEL);
CSL_0_(XCSL_0) = &B4 (CSL_0);
CSL_1_(XCSL_1) = &B4 (CSL_1);
OE_(OEL) = N1B (OE);
OEL_(XOEL) = &B4 (OEL);
CAS_(CASL) = N1B (CAS);
CASL_(XCASL) = &B4 (CASL);

/* Video outputs */

R_0_(XR_0) = &B8R (R_0);
R_1_(XR_1) = &B8R (R_1);
R_2_(XR_2) = &B8R (R_2);
R_3_(XR_3) = &B8R (R_3);
G_0_(XG_0) = &B8R (G_0);
G_1_(XG_1) = &B8R (G_1);
G_2_(XG_2) = &B8R (G_2);
G_3_(XG_3) = &B8R (G_3);
B_0_(XB_0) = &B8R (B_0);
B_1_(XB_1) = &B8R (B_1);
B_2_(XB_2) = &B8R (B_2);
B_3_(XB_3) = &B8R (B_3);
CHROMAL_(CHROMA) = N1A (CHROMAL);
CHROMA_(XCHROMA) = &B4R (CHROMA);
INCL_(INC) = N1A (INCL);
INC_(XINC) = &B4R (INC);

/* Audio outputs */

LEFTL_(XLEFTL) = &B8R (LEFTL);
LEFTH_(XLEFTH) = &B8R (LEFTH);
RIGHTL_(XRIGHTL) = &B8R (RIGHTL);
RIGHTH_(XRIGHTH) = &B8R (RIGHTH);

/* DSP Input / Output */

DSP_IO_(XDSP_IO, DSP_IN, TESTI_40) 
	= &BD4TR (XDSP_IO, DSP_OUT, TRIDIS, DSP_EN, TESTI_39);

/* General purpose input/output enables */

GPIOL_0_(XGPIOL_0) = &B4R(GPIOL_0);
GPIOL_1_(XGPIOL_1) = &B4R(GPIOL_1);

END MODULE;

END COMPILE;
END;
