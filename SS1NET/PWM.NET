COMPILE;
DIRECTORY MASTER;

MODULE PWM;

INPUTS	DACWRL,XCK,D_2,D_3,D_4,D_5,D_6,D_7,D_8,D_9,D_10,D_11,D_12,D_13,D_14,
   D_15;
OUTPUTS	PW_1,PW_2;
LEVEL FUNCTION;
DEFINE

/* Note that dac[15] is inverted before going to the counter ....
   effectively makes the DAC respond to 2's complement numbers	*/

PWMCTR1_(PW_1) = PWCTR(D_2,D_3,D_4,D_5,D_6,D_7,D_8,DACWRL,XCK);
PWMCTR2_(PW_2) = PWCTR(D_9,D_10,D_11,D_12,D_13,D_14,DL_15,DACWRL,XCK);
DL_15_(DL_15) = N1A(D_15);
END MODULE;

MODULE PWCTR;

INPUTS	D_0,D_1,D_2,D_3,D_4,D_5,D_6,LDL,XCK;
OUTPUTS	PW;
LEVEL FUNCTION;
DEFINE
PWCTR_(QL_0,QL_1,QL_2,QL_3,QL_4,QL_5,QL_6) = CTR7(D_0,D_1,D_2,D_3,D_4,D_5,D_6,
   LDL,ENAB,XCK);
PWG_(PWGL) = NR2A(LD,ENAB);/* with glitches */

LD_(LD) = N1A(LDL);
PW_(PWL,PW) = FD1A(PWGL,XCK); /* without glitches */

ENAB_(ENAB) = MACNAND7(QL_0,QL_1,QL_2,QL_3,QL_4,QL_5,QL_6);

END MODULE;

END COMPILE;
END;
