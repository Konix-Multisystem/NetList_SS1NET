COMPILE;
DIRECTORY MASTER;


MODULE ALU;

INPUTS	DDB_0,DDB_1,DDB_2,DDB_3,DDB_4,DDB_5,DDB_6,DDB_7,DDB_8,DDB_9,DDB_10,DDB_11,DDB_12,DDB_13,DDB_14,DDB_15,
   XWRL,XRDL,ZWRL,ZRDL,RESWRL,CARRYWRL,MZ0RDL,MZ1RDL,MZ2RDL,MZ0WRL,MZ1WRL,
   MZ2WRL,MODWRL,MODRDL,MULTL,MACL,WITHCYL,SUB,PDK_11,PDK_12,PDK_14,PDKL_11,
   PDKL_12,PDKL_13,PDKL_14,CCFL,CLK,RESETL,MZ_0,MZ_1,MZ_2,MZ_3,MZ_4,MZ_5,MZ_6,
   MZ_7,MZ_8,MZ_9,MZ_10,MZ_11,MZ_12,MZ_13,MZ_14,MZ_15,MZ_16,MZ_17,MZ_18,MZ_19,
   MZ_20,MZ_21,MZ_22,MZ_23,MZ_24,MZ_25,MZ_26,MZ_27,MZ_28,MZ_29,MZ_30,MZ_31,
   MZ_32,MZ_33,MZ_34,MZ_35,MZ_36,AZ_0,AZ_1,AZ_2,AZ_3,AZ_4,AZ_5,AZ_6,AZ_7,AZ_8,
   AZ_9,AZ_10,AZ_11,AZ_12,AZ_13,AZ_14,AZ_15,COUTL,DQCLK;
OUTPUTS	D_0,D_1,D_2,D_3,D_4,D_5,D_6,D_7,D_8,D_9,D_10,D_11,D_12,D_13,D_14,D_15,
   CARRY,X_0,X_1,X_2,X_3,X_4,X_5,X_6,X_7,X_8,X_9,X_10,X_11,X_12,X_13,X_14,X_15,
   ACC_0,ACC_1,ACC_2,ACC_3,ACC_4,ACC_5,ACC_6,ACC_7,ACC_8,ACC_9,ACC_10,ACC_11,
   ACC_12,ACC_13,ACC_14,ACC_15,ACC_16,ACC_17,ACC_18,ACC_19,ACC_20,ACC_21,ACC_22,
   ACC_23,ACC_24,ACC_25,ACC_26,ACC_27,ACC_28,ACC_29,ACC_30,ACC_31,ACC_32,ACC_33,
   ACC_34,ACC_35,MOD_5,MOD_6,CINL,M_3,S_0,S_1,S_2,S_3;
LEVEL FUNCTION;
DEFINE

/* X register */

XREG_0_(XU_0,XL_0) = LD1A(DDB_0,XWR);
XREG_1_(XU_1,XL_1) = LD1A(DDB_1,XWR);
XREG_2_(XU_2,XL_2) = LD1A(DDB_2,XWR);
XREG_3_(XU_3,XL_3) = LD1A(DDB_3,XWR);
XREG_4_(XU_4,XL_4) = LD1A(DDB_4,XWR);
XREG_5_(XU_5,XL_5) = LD1A(DDB_5,XWR);
XREG_6_(XU_6,XL_6) = LD1A(DDB_6,XWR);
XREG_7_(XU_7,XL_7) = LD1A(DDB_7,XWR);
XREG_8_(XU_8,XL_8) = LD1A(DDB_8,XWR);
XREG_9_(XU_9,XL_9) = LD1A(DDB_9,XWR);
XREG_10_(XU_10,XL_10) = LD1A(DDB_10,XWR);
XREG_11_(XU_11,XL_11) = LD1A(DDB_11,XWR);
XREG_12_(XU_12,XL_12) = LD1A(DDB_12,XWR);
XREG_13_(XU_13,XL_13) = LD1A(DDB_13,XWR);
XREG_14_(XU_14,XL_14) = LD1A(DDB_14,XWR);
XREG_15_(XU_15,XL_15) = LD1A(DDB_15,XWR);
XB_0_(X_0) = N1D(XL_0);
XB_1_(X_1) = N1D(XL_1);
XB_2_(X_2) = N1D(XL_2);
XB_3_(X_3) = N1D(XL_3);
XB_4_(X_4) = N1D(XL_4);
XB_5_(X_5) = N1D(XL_5);
XB_6_(X_6) = N1D(XL_6);
XB_7_(X_7) = N1D(XL_7);
XB_8_(X_8) = N1D(XL_8);
XB_9_(X_9) = N1D(XL_9);
XB_10_(X_10) = N1D(XL_10);
XB_11_(X_11) = N1D(XL_11);
XB_12_(X_12) = N1D(XL_12);
XB_13_(X_13) = N1D(XL_13);
XB_14_(X_14) = N1D(XL_14);
XB_15_(X_15) = N1D(XL_15);
XREGRD_0_(D_0) = BTS4B(XU_0,XRD);
XREGRD_1_(D_1) = BTS4B(X_1,XRD);
XREGRD_2_(D_2) = BTS4B(X_2,XRD);
XREGRD_3_(D_3) = BTS4B(X_3,XRD);
XREGRD_4_(D_4) = BTS4B(X_4,XRD);
XREGRD_5_(D_5) = BTS4B(X_5,XRD);
XREGRD_6_(D_6) = BTS4B(X_6,XRD);
XREGRD_7_(D_7) = BTS4B(X_7,XRD);
XREGRD_8_(D_8) = BTS4B(X_8,XRD);
XREGRD_9_(D_9) = BTS4B(X_9,XRD);
XREGRD_10_(D_10) = BTS4B(X_10,XRD);
XREGRD_11_(D_11) = BTS4B(X_11,XRD);
XREGRD_12_(D_12) = BTS4B(X_12,XRD);
XREGRD_13_(D_13) = BTS4B(X_13,XRD);
XREGRD_14_(D_14) = BTS4B(X_14,XRD);
XREGRD_15_(D_15) = BTS4B(X_15,XRD);

/* AZ register */

AZREG_0_(AZRL_0,AZR_0) = LD1A(AZD_0,RESWR);
AZREG_1_(AZRL_1,AZR_1) = LD1A(AZD_1,RESWR);
AZREG_2_(AZRL_2,AZR_2) = LD1A(AZD_2,RESWR);
AZREG_3_(AZRL_3,AZR_3) = LD1A(AZD_3,RESWR);
AZREG_4_(AZRL_4,AZR_4) = LD1A(AZD_4,RESWR);
AZREG_5_(AZRL_5,AZR_5) = LD1A(AZD_5,RESWR);
AZREG_6_(AZRL_6,AZR_6) = LD1A(AZD_6,RESWR);
AZREG_7_(AZRL_7,AZR_7) = LD1A(AZD_7,RESWR);
AZREG_8_(AZRL_8,AZR_8) = LD1A(AZD_8,RESWR);
AZREG_9_(AZRL_9,AZR_9) = LD1A(AZD_9,RESWR);
AZREG_10_(AZRL_10,AZR_10) = LD1A(AZD_10,RESWR);
AZREG_11_(AZRL_11,AZR_11) = LD1A(AZD_11,RESWR);
AZREG_12_(AZRL_12,AZR_12) = LD1A(AZD_12,RESWR);
AZREG_13_(AZRL_13,AZR_13) = LD1A(AZD_13,RESWR);
AZREG_14_(AZRL_14,AZR_14) = LD1A(AZD_14,RESWR);
AZREG_15_(AZRL_15,AZR_15) = LD1A(AZD_15,RESWR);
ZREGRD_0_(D_0) = BTS5B(AZRL_0,ZRD);
ZREGRD_1_(D_1) = BTS5B(AZRL_1,ZRD);
ZREGRD_2_(D_2) = BTS5B(AZRL_2,ZRD);
ZREGRD_3_(D_3) = BTS5B(AZRL_3,ZRD);
ZREGRD_4_(D_4) = BTS5B(AZRL_4,ZRD);
ZREGRD_5_(D_5) = BTS5B(AZRL_5,ZRD);
ZREGRD_6_(D_6) = BTS5B(AZRL_6,ZRD);
ZREGRD_7_(D_7) = BTS5B(AZRL_7,ZRD);
ZREGRD_8_(D_8) = BTS5B(AZRL_8,ZRD);
ZREGRD_9_(D_9) = BTS5B(AZRL_9,ZRD);
ZREGRD_10_(D_10) = BTS5B(AZRL_10,ZRD);
ZREGRD_11_(D_11) = BTS5B(AZRL_11,ZRD);
ZREGRD_12_(D_12) = BTS5B(AZRL_12,ZRD);
ZREGRD_13_(D_13) = BTS5B(AZRL_13,ZRD);
ZREGRD_14_(D_14) = BTS5B(AZRL_14,ZRD);
ZREGRD_15_(D_15) = BTS5B(AZRL_15,ZRD);
/* Input MUX for AZ register */
AZD_0_(AZD_0) = AO2A(AZ_0,ZWRL,DDB_0,RESWRL);
AZD_1_(AZD_1) = AO2A(AZ_1,ZWRL,DDB_1,RESWRL);
AZD_2_(AZD_2) = AO2A(AZ_2,ZWRL,DDB_2,RESWRL);
AZD_3_(AZD_3) = AO2A(AZ_3,ZWRL,DDB_3,RESWRL);
AZD_4_(AZD_4) = AO2A(AZ_4,ZWRL,DDB_4,RESWRL);
AZD_5_(AZD_5) = AO2A(AZ_5,ZWRL,DDB_5,RESWRL);
AZD_6_(AZD_6) = AO2A(AZ_6,ZWRL,DDB_6,RESWRL);
AZD_7_(AZD_7) = AO2A(AZ_7,ZWRL,DDB_7,RESWRL);
AZD_8_(AZD_8) = AO2A(AZ_8,ZWRL,DDB_8,RESWRL);
AZD_9_(AZD_9) = AO2A(AZ_9,ZWRL,DDB_9,RESWRL);
AZD_10_(AZD_10) = AO2A(AZ_10,ZWRL,DDB_10,RESWRL);
AZD_11_(AZD_11) = AO2A(AZ_11,ZWRL,DDB_11,RESWRL);
AZD_12_(AZD_12) = AO2A(AZ_12,ZWRL,DDB_12,RESWRL);
AZD_13_(AZD_13) = AO2A(AZ_13,ZWRL,DDB_13,RESWRL);
AZD_14_(AZD_14) = AO2A(AZ_14,ZWRL,DDB_14,RESWRL);
AZD_15_(AZD_15) = AO2A(AZ_15,ZWRL,DDB_15,RESWRL);
/* Input MUX for multiplier result register */

ZREG_0_(ZREG_0) = AO2A(DDB_0,LOADZ,MZ_0,ARITHZ);
ZREG_1_(ZREG_1) = AO2A(DDB_1,LOADZ,MZ_1,ARITHZ);
ZREG_2_(ZREG_2) = AO2A(DDB_2,LOADZ,MZ_2,ARITHZ);
ZREG_3_(ZREG_3) = AO2A(DDB_3,LOADZ,MZ_3,ARITHZ);
ZREG_4_(ZREG_4) = AO2A(DDB_4,LOADZ,MZ_4,ARITHZ);
ZREG_5_(ZREG_5) = AO2A(DDB_5,LOADZ,MZ_5,ARITHZ);
ZREG_6_(ZREG_6) = AO2A(DDB_6,LOADZ,MZ_6,ARITHZ);
ZREG_7_(ZREG_7) = AO2A(DDB_7,LOADZ,MZ_7,ARITHZ);
ZREG_8_(ZREG_8) = AO2A(DDB_8,LOADZ,MZ_8,ARITHZ);
ZREG_9_(ZREG_9) = AO2A(DDB_9,LOADZ,MZ_9,ARITHZ);
ZREG_10_(ZREG_10) = AO2A(DDB_10,LOADZ,MZ_10,ARITHZ);
ZREG_11_(ZREG_11) = AO2A(DDB_11,LOADZ,MZ_11,ARITHZ);
ZREG_12_(ZREG_12) = AO2A(DDB_12,LOADZ,MZ_12,ARITHZ);
ZREG_13_(ZREG_13) = AO2A(DDB_13,LOADZ,MZ_13,ARITHZ);
ZREG_14_(ZREG_14) = AO2A(DDB_14,LOADZ,MZ_14,ARITHZ);
ZREG_15_(ZREG_15) = AO2A(DDB_15,LOADZ,MZ_15,ARITHZ);
ZREG_16_(ZREG_16) = AO2A(DDB_0,LOADZ,MZ_16,ARITHZ);
ZREG_17_(ZREG_17) = AO2A(DDB_1,LOADZ,MZ_17,ARITHZ);
ZREG_18_(ZREG_18) = AO2A(DDB_2,LOADZ,MZ_18,ARITHZ);
ZREG_19_(ZREG_19) = AO2A(DDB_3,LOADZ,MZ_19,ARITHZ);
ZREG_20_(ZREG_20) = AO2A(DDB_4,LOADZ,MZ_20,ARITHZ);
ZREG_21_(ZREG_21) = AO2A(DDB_5,LOADZ,MZ_21,ARITHZ);
ZREG_22_(ZREG_22) = AO2A(DDB_6,LOADZ,MZ_22,ARITHZ);
ZREG_23_(ZREG_23) = AO2A(DDB_7,LOADZ,MZ_23,ARITHZ);
ZREG_24_(ZREG_24) = AO2A(DDB_8,LOADZ,MZ_24,ARITHZ);
ZREG_25_(ZREG_25) = AO2A(DDB_9,LOADZ,MZ_25,ARITHZ);
ZREG_26_(ZREG_26) = AO2A(DDB_10,LOADZ,MZ_26,ARITHZ);
ZREG_27_(ZREG_27) = AO2A(DDB_11,LOADZ,MZ_27,ARITHZ);
ZREG_28_(ZREG_28) = AO2A(DDB_12,LOADZ,MZ_28,ARITHZ);
ZREG_29_(ZREG_29) = AO2A(DDB_13,LOADZ,MZ_29,ARITHZ);
ZREG_30_(ZREG_30) = AO2A(DDB_14,LOADZ,MZ_30,ARITHZ);
ZREG_31_(ZREG_31) = AO2A(DDB_15,LOADZ,MZ_31,ARITHZ);
ZREG_32_(ZREG_32) = AO2A(DDB_0,LOADZ,MZ_32,ARITHZ);
ZREG_33_(ZREG_33) = AO2A(DDB_1,LOADZ,MZ_33,ARITHZ);
ZREG_34_(ZREG_34) = AO2A(DDB_2,LOADZ,MZ_34,ARITHZ);
ZREG_35_(ZREG_35) = AO2A(DDB_3,LOADZ,MZ_35,ARITHZ);

ARITHZ_(ARITHZ) = ND2C(MULTL,MACL);
LOADZ_(LOADZ) = B1A(ARITHZ);

MZR_0_(MZRL_0,MZR_0) = FD1A(ZREG_0,MZLOWR);
MZR_1_(MZRL_1,MZR_1) = FD1A(ZREG_1,MZLOWR);
MZR_2_(MZRL_2,MZR_2) = FD1A(ZREG_2,MZLOWR);
MZR_3_(MZRL_3,MZR_3) = FD1A(ZREG_3,MZLOWR);
MZR_4_(MZRL_4,MZR_4) = FD1A(ZREG_4,MZLOWR);
MZR_5_(MZRL_5,MZR_5) = FD1A(ZREG_5,MZLOWR);
MZR_6_(MZRL_6,MZR_6) = FD1A(ZREG_6,MZLOWR);
MZR_7_(MZRL_7,MZR_7) = FD1A(ZREG_7,MZLOWR);
MZR_8_(MZRL_8,MZR_8) = FD1A(ZREG_8,MZLOWR);
MZR_9_(MZRL_9,MZR_9) = FD1A(ZREG_9,MZLOWR);
MZR_10_(MZRL_10,MZR_10) = FD1A(ZREG_10,MZLOWR);
MZR_11_(MZRL_11,MZR_11) = FD1A(ZREG_11,MZLOWR);
MZR_12_(MZRL_12,MZR_12) = FD1A(ZREG_12,MZLOWR);
MZR_13_(MZRL_13,MZR_13) = FD1A(ZREG_13,MZLOWR);
MZR_14_(MZRL_14,MZR_14) = FD1A(ZREG_14,MZLOWR);
MZR_15_(MZRL_15,MZR_15) = FD1A(ZREG_15,MZLOWR);
MZ0REGRD_0_(D_0) = BTS5B(MZRL_0,MZ0RD);
MZ0REGRD_1_(D_1) = BTS5B(MZRL_1,MZ0RD);
MZ0REGRD_2_(D_2) = BTS5B(MZRL_2,MZ0RD);
MZ0REGRD_3_(D_3) = BTS5B(MZRL_3,MZ0RD);
MZ0REGRD_4_(D_4) = BTS5B(MZRL_4,MZ0RD);
MZ0REGRD_5_(D_5) = BTS5B(MZRL_5,MZ0RD);
MZ0REGRD_6_(D_6) = BTS5B(MZRL_6,MZ0RD);
MZ0REGRD_7_(D_7) = BTS5B(MZRL_7,MZ0RD);
MZ0REGRD_8_(D_8) = BTS5B(MZRL_8,MZ0RD);
MZ0REGRD_9_(D_9) = BTS5B(MZRL_9,MZ0RD);
MZ0REGRD_10_(D_10) = BTS5B(MZRL_10,MZ0RD);
MZ0REGRD_11_(D_11) = BTS5B(MZRL_11,MZ0RD);
MZ0REGRD_12_(D_12) = BTS5B(MZRL_12,MZ0RD);
MZ0REGRD_13_(D_13) = BTS5B(MZRL_13,MZ0RD);
MZ0REGRD_14_(D_14) = BTS5B(MZRL_14,MZ0RD);
MZ0REGRD_15_(D_15) = BTS5B(MZRL_15,MZ0RD);

MZR_16_(MZRL_16,MZR_16) = FD1A(ZREG_16,MZMIDWR);
MZR_17_(MZRL_17,MZR_17) = FD1A(ZREG_17,MZMIDWR);
MZR_18_(MZRL_18,MZR_18) = FD1A(ZREG_18,MZMIDWR);
MZR_19_(MZRL_19,MZR_19) = FD1A(ZREG_19,MZMIDWR);
MZR_20_(MZRL_20,MZR_20) = FD1A(ZREG_20,MZMIDWR);
MZR_21_(MZRL_21,MZR_21) = FD1A(ZREG_21,MZMIDWR);
MZR_22_(MZRL_22,MZR_22) = FD1A(ZREG_22,MZMIDWR);
MZR_23_(MZRL_23,MZR_23) = FD1A(ZREG_23,MZMIDWR);
MZR_24_(MZRL_24,MZR_24) = FD1A(ZREG_24,MZMIDWR);
MZR_25_(MZRL_25,MZR_25) = FD1A(ZREG_25,MZMIDWR);
MZR_26_(MZRL_26,MZR_26) = FD1A(ZREG_26,MZMIDWR);
MZR_27_(MZRL_27,MZR_27) = FD1A(ZREG_27,MZMIDWR);
MZR_28_(MZRL_28,MZR_28) = FD1A(ZREG_28,MZMIDWR);
MZR_29_(MZRL_29,MZR_29) = FD1A(ZREG_29,MZMIDWR);
MZR_30_(MZRL_30,MZR_30) = FD1A(ZREG_30,MZMIDWR);
MZR_31_(MZRL_31,MZR_31) = FD1A(ZREG_31,MZMIDWR);
MZ1REGRD_0_(D_0) = BTS5B(MZRL_16,MZ1RD);
MZ1REGRD_1_(D_1) = BTS5B(MZRL_17,MZ1RD);
MZ1REGRD_2_(D_2) = BTS5B(MZRL_18,MZ1RD);
MZ1REGRD_3_(D_3) = BTS5B(MZRL_19,MZ1RD);
MZ1REGRD_4_(D_4) = BTS5B(MZRL_20,MZ1RD);
MZ1REGRD_5_(D_5) = BTS5B(MZRL_21,MZ1RD);
MZ1REGRD_6_(D_6) = BTS5B(MZRL_22,MZ1RD);
MZ1REGRD_7_(D_7) = BTS5B(MZRL_23,MZ1RD);
MZ1REGRD_8_(D_8) = BTS5B(MZRL_24,MZ1RD);
MZ1REGRD_9_(D_9) = BTS5B(MZRL_25,MZ1RD);
MZ1REGRD_10_(D_10) = BTS5B(MZRL_26,MZ1RD);
MZ1REGRD_11_(D_11) = BTS5B(MZRL_27,MZ1RD);
MZ1REGRD_12_(D_12) = BTS5B(MZRL_28,MZ1RD);
MZ1REGRD_13_(D_13) = BTS5B(MZRL_29,MZ1RD);
MZ1REGRD_14_(D_14) = BTS5B(MZRL_30,MZ1RD);
MZ1REGRD_15_(D_15) = BTS5B(MZRL_31,MZ1RD);

MZR_32_(MZRL_32,MZR_32) = FD1A(ZREG_32,MZHIWR);
MZR_33_(MZRL_33,MZR_33) = FD1A(ZREG_33,MZHIWR);
MZR_34_(MZRL_34,MZR_34) = FD1A(ZREG_34,MZHIWR);
MZR_35_(MZRL_35,MZR_35) = FD1A(ZREG_35,MZHIWR);
MZ2REGRD_0_(D_0) = BTS5B(MZRL_32,MZ2RD);
MZ2REGRD_1_(D_1) = BTS5B(MZRL_33,MZ2RD);
MZ2REGRD_2_(D_2) = BTS5B(MZRL_34,MZ2RD);
MZ2REGRD_3_(D_3) = BTS5B(MZRL_35,MZ2RD);
MZ2REGRD_4_(D_4) = BTS5B(CARRYL,MZ2RD);

MZ0RD_(MZ0RD) = N1C(MZ0RDL);
MZ1RD_(MZ1RD) = N1C(MZ1RDL);
MZ2RD_(MZ2RD) = N1B(MZ2RDL);

/* Multiply WITHOUT accumulate is simply achieved by setting the wrap-
   around value to ZERO */

ACC_0_(ACC_0) = NR2A(MZRL_0,MACL);
ACC_1_(ACC_1) = NR2A(MZRL_1,MACL);
ACC_2_(ACC_2) = NR2A(MZRL_2,MACL);
ACC_3_(ACC_3) = NR2A(MZRL_3,MACL);
ACC_4_(ACC_4) = NR2A(MZRL_4,MACL);
ACC_5_(ACC_5) = NR2A(MZRL_5,MACL);
ACC_6_(ACC_6) = NR2A(MZRL_6,MACL);
ACC_7_(ACC_7) = NR2A(MZRL_7,MACL);
ACC_8_(ACC_8) = NR2A(MZRL_8,MACL);
ACC_9_(ACC_9) = NR2A(MZRL_9,MACL);
ACC_10_(ACC_10) = NR2A(MZRL_10,MACL);
ACC_11_(ACC_11) = NR2A(MZRL_11,MACL);
ACC_12_(ACC_12) = NR2A(MZRL_12,MACL);
ACC_13_(ACC_13) = NR2A(MZRL_13,MACL);
ACC_14_(ACC_14) = NR2A(MZRL_14,MACL);
ACC_15_(ACC_15) = NR2A(MZRL_15,MACL);
ACC_16_(ACC_16) = NR2A(MZRL_16,MACL);
ACC_17_(ACC_17) = NR2A(MZRL_17,MACL);
ACC_18_(ACC_18) = NR2A(MZRL_18,MACL);
ACC_19_(ACC_19) = NR2A(MZRL_19,MACL);
ACC_20_(ACC_20) = NR2A(MZRL_20,MACL);
ACC_21_(ACC_21) = NR2A(MZRL_21,MACL);
ACC_22_(ACC_22) = NR2A(MZRL_22,MACL);
ACC_23_(ACC_23) = NR2A(MZRL_23,MACL);
ACC_24_(ACC_24) = NR2A(MZRL_24,MACL);
ACC_25_(ACC_25) = NR2A(MZRL_25,MACL);
ACC_26_(ACC_26) = NR2A(MZRL_26,MACL);
ACC_27_(ACC_27) = NR2A(MZRL_27,MACL);
ACC_28_(ACC_28) = NR2A(MZRL_28,MACL);
ACC_29_(ACC_29) = NR2A(MZRL_29,MACL);
ACC_30_(ACC_30) = NR2A(MZRL_30,MACL);
ACC_31_(ACC_31) = NR2A(MZRL_31,MACL);
ACC_32_(ACC_32) = NR2A(MZRL_32,MACL);
ACC_33_(ACC_33) = NR2A(MZRL_33,MACL);
ACC_34_(ACC_34) = NR2A(MZRL_34,MACL);
ACC_35_(ACC_35) = NR2A(MZRL_35,MACL);

/* Generate load signals for multiplier output latch. Source is either
	a MULT or MAC opcode (subject to condition code and RUN) or is
	the load signal as before. */

MZLOWRL_(MZLOWRL) = AND3A(MULTL,MACL,MZ0WRL);
MZLOWR_(MZLOWR) = OR2B(MZLOWRL,DQCLK);

MZMIDWRL_(MZMIDWRL) = AND3A(MULTL,MACL,MZ1WRL);
MZMIDWR_(MZMIDWR) = OR2B(MZMIDWRL,DQCLK);

MZHIWRL_(MZHIWRL) = AND3A(MULTL,MACL,MZ2WRL);
MZHIWR_(MZHIWR) = OR2B(MZHIWRL,DQCLK);

COUT_(COUT) = N1A(COUTL);
/* Generate the codes for the GFT1811A alu model to work with my
	opcodes. */

M_1_(M_1) = ND3A(PDK_12,PDKL_13,PDKL_14);
M_2_(M_2) = ND2A(PDK_14,MOD_4);
M_3_(M_3) = ND2A(M_1,M_2);

S3_1_(S3_1) = ND3A(PDKL_11,PDKL_12,PDKL_14);
S3_2_(S3_2) = ND3A(PDK_12,PDKL_13,PDKL_14);
S3_3_(S3_3) = ND2A(PDK_14,MOD_3);
S_3_(S_3) = ND3A(S3_1,S3_2,S3_3);

S2_1_(S2_1) = ND3A(PDK_11,PDKL_12,PDKL_14);
S2_2_(S2_2) = ND3A(PDK_11,PDKL_13,PDKL_14);
S2_3_(S2_3) = ND2A(PDK_14,MOD_2);
S_2_(S_2) = ND3A(S2_1,S2_2,S2_3);

S1_1_(S1_1) = ND2A(PDK_14,MOD_1);
S_1_(S_1) = ND3A(S2_1,S3_2,S1_1);

S0_1_(S0_1) = ND3A(PDKL_11,PDKL_13,PDKL_14);
S0_2_(S0_2) = ND3A(PDKL_11,PDKL_12,PDKL_14);
S0_3_(S0_3) = ND2A(PDK_14,MOD_0);
S_0_(S_0) = ND3A(S0_1,S0_2,S0_3);


/* The Carry flag is here! */

CARRYFLAG_(CARRY,CARRYL) = FD2A(CMUX,CYLDL,RESETL);

/* Carry input is as follows .. 
	For SUB instructions cinL = 0
	For ADC, SBC, GAI instructions, cinL = carryL
	For all other instructions cinL = 1		*/

CIN1_(CIN1) = NR2A(WITHCYL,CARRYL);
CINL_(CINL) = NR2A(CIN1,SUB);
CMUX_(CMUX) = CYMUX(COUT,MZ_36,CARRYL,RESWRL,CCFL);


/* Write enable signals are combined with CLK locally, to ensure smallest
	skew between data generation and write pulse */

XRD_(XRD) = N1C(XRDL);
ZRD_(ZRD) = N1C(ZRDL);
XWR_(XWR) = NR2C(XWRL,DQCLK);
ZWR_(ZWR) = NR2A(ZWRL,DQCLK);
RESREGWRL_(RESREGWRL) = AND2A(RESWRL,ZWRL);
RESWR_(RESWR) = NR2C(RESREGWRL,DQCLK);
CYLDL_(CYLDL) = OR2A(CARRYWRL,DQCLK);	/* load carry latch

						at the same time as result */
MODRD_(MODRD) = N1B(MODRDL);
MODWR_(MODWR) = NR2B(MODWRL,DQCLK);
/* Mode register */

MODE_0_(MOD_0,MODL_0) = LD1A(DDB_0,MODWR);
MODE_1_(MOD_1,MODL_1) = LD1A(DDB_1,MODWR);
MODE_2_(MOD_2,MODL_2) = LD1A(DDB_2,MODWR);
MODE_3_(MOD_3,MODL_3) = LD1A(DDB_3,MODWR);
MODE_4_(MOD_4,MODL_4) = LD1A(DDB_4,MODWR);
MODEU_5_(MODU_5,MODL_5) = LD1A(DDB_5,MODWR);
MODEU_6_(MODU_6,MODL_6) = LD1A(DDB_6,MODWR);
/* Reinforce mode bits */
MODE_5_(MOD_5) = B1A(MODL_5);
MODE_6_(MOD_6) = B1A(MODL_6);
MODERD_0_(D_0) = BTS4B(MOD_0,MODRD);
MODERD_1_(D_1) = BTS4B(MOD_1,MODRD);
MODERD_2_(D_2) = BTS4B(MOD_2,MODRD);
MODERD_3_(D_3) = BTS4B(MOD_3,MODRD);
MODERD_4_(D_4) = BTS4B(MOD_4,MODRD);
MODERD_5_(D_5) = BTS4B(MOD_5,MODRD);
MODERD_6_(D_6) = BTS4B(MOD_6,MODRD);
END MODULE;

MODULE CYMUX;

INPUTS	A,B,C,SELL_0,SELL_1;
OUTPUTS	Z;
LEVEL FUNCTION;
DEFINE

D_(D) = NR2A(A,SELL_0);
E_(E) = NR2A(B,G);
F_(F) = NR2A(C,SELL_1);
G_(G) = ND2A(SELL_0,SELL_1);
Z_(Z) = NR3A(D,E,F);
END MODULE;
END COMPILE;
END;
