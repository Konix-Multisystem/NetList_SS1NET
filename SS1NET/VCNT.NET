COMPILE;
DIRECTORY MASTER;
/********************************************************
*	vcnt-hdl					*
*	2/11/88						*
********************************************************/

/*
This module is the vertical timebase in the SLIPSTREAM chip on the ACW
*/






MODULE VCNT;

INPUTS	D_0,D_1,D_2,D_3,D_4,D_5,D_6,D_7,RESETL_0,CLK,WD_0,WD_1,WD_2,WD_3,WD_4,
   WD_5,WD_6,WD_7,VCNTL,VCNTH,LPL_2,LPL_3,VLOCK,NTSC,GENLOCK,STARTL,STARTH,ENDL,
   ENDH,INTL,INTH,HBORDER,HBLANKING,HVSYNC,LPCLK,HD1,DIAG,LORES,HINT;
OUTPUTS	D_0,D_1,D_2,D_3,D_4,D_5,D_6,D_7,VVACTIVE,VSYNC,VINT,BORDER,BLANKING,
   STARTD,NEXTV;
LEVEL FUNCTION;
DEFINE

/* buffer the clock and reset */

RESETL_(RESETL) = B3A(RESETL_0);
RES_(RES) = N1A(RESETL);

/* latch the msb of the vertical count */

VCNT_8_(VCNT_8,VCNTL_8) = LD1A(WD_0,VCNTH);

/* the vertical counter usually increments when the horizontal
count is one (hd1). For test purposes the counter may count every clock
cycle by setting diag. Reset is added to the decode for 'hd1d' to
help define the JKs after reset */

HDD_(HDD) = NR2A(HD1,DIAG);
HD1D_(HD1D) = NR2C(HDD,RES);

/* the vertical counter */

VCNTLBL_(VCNTLBL) = N1C(VCNTL);
Q_0_(VC_0,VCB_0,CO_0) = SYNCNT(WD_0,CLK,NEXTV,VCNTLBL,HD1D);
Q_1_(VC_1,VCB_1,CO_1) = SYNCNT(WD_1,CLK,NEXTV,VCNTLBL,CO_0);
Q_2_(VC_2,VCB_2,CO_2) = SYNCNT(WD_2,CLK,NEXTV,VCNTLBL,CO_1);
Q_3_(VC_3,VCB_3,CO_3) = SYNCNT(WD_3,CLK,NEXTV,VCNTLBL,CO_2);
Q_4_(VC_4,VCB_4,CO_4) = SYNCNT(WD_4,CLK,NEXTV,VCNTLBL,CO_3);
Q_5_(VC_5,VCB_5,CO_5) = SYNCNT(WD_5,CLK,NEXTV,VCNTLBL,CO_4);
Q_6_(VC_6,VCB_6,CO_6) = SYNCNT(WD_6,CLK,NEXTV,VCNTLBL,CO_5);
Q_7_(VC_7,VCB_7,CO_7) = SYNCNT(WD_7,CLK,NEXTV,VCNTLBL,CO_6);
Q_8_(VC_8,VCB_8,CO_8) = SYNCNT(VCNT_8,CLK,NEXTV,VCNTLBL,CO_7);

/* the light pen register */

DL_0_(D_0) = ZTLATCH1(D_0,VCB_0,LPCLK,LPL_2);
DL_1_(D_1) = ZTLATCH1(D_1,VCB_1,LPCLK,LPL_2);
DL_2_(D_2) = ZTLATCH1(D_2,VCB_2,LPCLK,LPL_2);
DL_3_(D_3) = ZTLATCH1(D_3,VCB_3,LPCLK,LPL_2);
DL_4_(D_4) = ZTLATCH1(D_4,VCB_4,LPCLK,LPL_2);
DL_5_(D_5) = ZTLATCH1(D_5,VCB_5,LPCLK,LPL_2);
DL_6_(D_6) = ZTLATCH1(D_6,VCB_6,LPCLK,LPL_2);
DL_7_(D_7) = ZTLATCH1(D_7,VCB_7,LPCLK,LPL_2);
DH_0_(D_0) = ZTLATCH1(D_0,VCB_8,LPCLK,LPL_3);
DH_1_(D_1) = MACZINVB1(RESETL,LPL_3);
DH_2_(D_2) = MACZINVB1(RESETL,LPL_3);
DH_3_(D_3) = MACZINVB1(RESETL,LPL_3);
DH_4_(D_4) = MACZINVB1(RESETL,LPL_3);
DH_5_(D_5) = MACZINVB1(RESETL,LPL_3);
DH_6_(D_6) = MACZINVB1(RESETL,LPL_3);
DH_7_(D_7) = MACZINVB1(RESETL,LPL_3);

/* the interupt register */

INT_0_(INT_0,INTB_0) = LD1A(WD_0,INTL);
INT_1_(INT_1,INTB_1) = LD1A(WD_1,INTL);
INT_2_(INT_2,INTB_2) = LD1A(WD_2,INTL);
INT_3_(INT_3,INTB_3) = LD1A(WD_3,INTL);
INT_4_(INT_4,INTB_4) = LD1A(WD_4,INTL);
INT_5_(INT_5,INTB_5) = LD1A(WD_5,INTL);
INT_6_(INT_6,INTB_6) = LD1A(WD_6,INTL);
INT_7_(INT_7,INTB_7) = LD1A(WD_7,INTL);
INT_8_(INT_8,INTB_8) = LD1A(WD_0,INTH);

VINT_(VINT) = EQU9(INT_0,INT_1,INT_2,INT_3,INT_4,INT_5,INT_6,INT_7,INT_8,VC_0,
   VC_1,VC_2,VC_3,VC_4,VC_5,VC_6,VC_7,VC_8,HINT);

VD13_(VD13) = AND10(HD1D,VCB_8,VCB_7,VCB_6,VCB_5,VCB_4,VC_3,VC_2,VCB_1,VC_0);

VD16_(VD16) = AND10(HD1D,VCB_8,VCB_7,VCB_6,VCB_5,VC_4,VCB_3,VCB_2,VCB_1,VCB_0);

VD303_(VD303) = AND10(HD1D,VC_8,VCB_7,VCB_6,VC_5,VCB_4,VC_3,VC_2,VC_1,VC_0);

VD308_(VD308) = AND10(HD1D,VC_8,VCB_7,VCB_6,VC_5,VC_4,VCB_3,VC_2,VCB_1,VCB_0);

VD311_(VD311) = AND10(HD1D,VC_8,VCB_7,VCB_6,VC_5,VC_4,VCB_3,VC_2,VC_1,VC_0);

VD255_(VD255) = AND10(HD1D,VCB_8,VC_7,VC_6,VC_5,VC_4,VC_3,VC_2,VC_1,VC_0);

VD258_(VD258) = AND10(HD1D,VC_8,VCB_7,VCB_6,VCB_5,VCB_4,VCB_3,VCB_2,VC_1,
   VCB_0);

VD261_(VD261) = AND10(HD1D,VC_8,VCB_7,VCB_6,VCB_5,VCB_4,VCB_3,VC_2,VCB_1,VC_0);


PAL_(PAL) = N1A(NTSC);

/* decode for blanking changes for ntsc */ 

VBENDL_(VBENDL) = AO2A(PAL,VD303,NTSC,VD255);
VBEND_(VBEND) = N1A(VBENDL);
VBSTARTL_(VBSTARTL) = AO2A(PAL,VD16,NTSC,VD13);
VBSRART_(VBSTART) = N1A(VBSTARTL);

/* likewise decodes for vertical sync */ 

VSSTL_(VSSTL) = AO2A(PAL,VD308,NTSC,VD258);
VSST_(VSST) = N1A(VSSTL);
VSENDL_(VSENDL) = AO2A(PAL,VD311,NTSC,VD261);

/* The last decode is combined with the vertical lock input so they
have an equivalent effect */         

VLOCKD_(VLOCKD,VLOCKDL) = FD2A(VLOCK,CLK,RESETL);
VLOCKL_(VLOCKL) = ND2A(GENLOCK,VLOCKD);
NEXTV_(NEXTV) = ND2A(VLOCKL,VSENDL);

/* generate vertical sync but disable when genlocking */

VVSYNC_(VVSYNC,VVSYNCL) = JK(VSST,NEXTV,RES,CLK);
VSYNCDL_(VSYNCDL) = ND2A(HVSYNC,VVSYNC);
VSYNC_(VSYNC) = NR2A(VSYNCDL,GENLOCK);

/* generate blanking */

VBLANKING_(VBLANKING,VBLANKINGL) = JK(VBEND,VBSTART,RES,CLK);
BLANKING_(BLANKING) = OR2A(HBLANKING,VBLANKING);


/* start and end registers */

START_0_(START_0,STARTB_0) = LD1A(WD_0,STARTL);
START_1_(START_1,STARTB_1) = LD1A(WD_1,STARTL);
START_2_(START_2,STARTB_2) = LD1A(WD_2,STARTL);
START_3_(START_3,STARTB_3) = LD1A(WD_3,STARTL);
START_4_(START_4,STARTB_4) = LD1A(WD_4,STARTL);
START_5_(START_5,STARTB_5) = LD1A(WD_5,STARTL);
START_6_(START_6,STARTB_6) = LD1A(WD_6,STARTL);
START_7_(START_7,STARTB_7) = LD1A(WD_7,STARTL);
STARTH_8_(START_8,STARTB_8) = LD1A(WD_0,STARTH);
STARTD_(STARTD) = EQU9(START_0,START_1,START_2,START_3,START_4,START_5,START_6,
   START_7,START_8,VC_0,VC_1,VC_2,VC_3,VC_4,VC_5,VC_6,VC_7,VC_8,HD1D);

END_0_(END_0,ENDB_0) = LD1A(WD_0,ENDL);
END_1_(END_1,ENDB_1) = LD1A(WD_1,ENDL);
END_2_(END_2,ENDB_2) = LD1A(WD_2,ENDL);
END_3_(END_3,ENDB_3) = LD1A(WD_3,ENDL);
END_4_(END_4,ENDB_4) = LD1A(WD_4,ENDL);
END_5_(END_5,ENDB_5) = LD1A(WD_5,ENDL);
END_6_(END_6,ENDB_6) = LD1A(WD_6,ENDL);
END_7_(END_7,ENDB_7) = LD1A(WD_7,ENDL);
ENDH_8_(END_8,ENDB_8) = LD1A(WD_0,ENDH);
ENDD_(ENDD) = EQU9(END_0,END_1,END_2,END_3,END_4,END_5,END_6,END_7,END_8,VC_0,
   VC_1,VC_2,VC_3,VC_4,VC_5,VC_6,VC_7,VC_8,HD1D);

/* border is active outside these lines */

VBORDER_(VBORDERL,VBORDER) = JK(STARTD,ENDD,RES,CLK);
HBORDERL_(HBORDERL) = N1A(HBORDER);
BORDER_(BORDER) = ND2A(VBORDERL,HBORDERL);

/* Video is always active on certain lines in order to refresh memory */

/* The psuedo static ram chips are the most demanding, 256 cycles in 4ms,
4ms is approximately 64 video lines, refresh must occur on line 0 to force
refresh while genlocking. A low res. line refreshes 64 rows, a medium or high
res. line refreshes 128 rows so:-

every 64 lines starting at line zero the video is active for 2 or 4 lines */

LORESL_(LORESL) = N1A(LORES);
REF4_(REF4) = ND2A(LORESL,VC_1);
REFACTIVEL_(REFACTIVEL) = ND5A(VCB_2,VCB_3,VCB_4,VCB_5,REF4);

VVACTIVE_(VVACTIVE) = ND2A(REFACTIVEL,VBORDER);

END MODULE;

MODULE EQU9;

INPUTS	A_0,A_1,A_2,A_3,A_4,A_5,A_6,A_7,A_8,B_0,B_1,B_2,B_3,B_4,B_5,B_6,B_7,B_8,
   EN;
OUTPUTS	EQ;
LEVEL FUNCTION;
DEFINE

EQ_0_(EQ_0) = ENA(A_0,B_0);
EQ_1_(EQ_1) = ENA(A_1,B_1);
EQ_2_(EQ_2) = ENA(A_2,B_2);
EQ_3_(EQ_3) = ENA(A_3,B_3);
EQ_4_(EQ_4) = ENA(A_4,B_4);
EQ_5_(EQ_5) = ENA(A_5,B_5);
EQ_6_(EQ_6) = ENA(A_6,B_6);
EQ_7_(EQ_7) = ENA(A_7,B_7);
EQ_8_(EQ_8) = ENA(A_8,B_8);
EQ_(EQ) = AND10(EQ_0,EQ_1,EQ_2,EQ_3,EQ_4,EQ_5,EQ_6,EQ_7,EQ_8,EN);

END MODULE;
END COMPILE;
END;
