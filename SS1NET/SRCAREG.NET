COMPILE;
DIRECTORY MASTER;
/****************************************************************************
srcareg
15/10/88

Source Address Register

The register is loaded in byte chunks by ldsaL[0-2], or as a whole by
upsldL.  The selection between input data and adder output is given by 
sdasel.

This register also contains the addback mechanism, which adds the contents
of bits 16 and 8-15 to bits -1 and 0-7.  The signal addback is active for
the cycle in which this occurs, and addbld is used to load the appropriate
register bit.  This must only be active in the second half of the cycle as
the source register may already have been loaded in the first half.

****************************************************************************/


MODULE SRCAREG;

INPUTS	D_0,D_1,D_2,D_3,D_4,D_5,D_6,D_7,ADDBACKL,ADDBLDL,ADDQ_0,ADDQ_1,ADDQ_2,
   ADDQ_3,ADDQ_4,ADDQ_5,ADDQ_6,ADDQ_7,ADDQ_8,ADDQ_9,ADDQ_10,ADDQ_11,ADDQ_12,
   ADDQ_13,ADDQ_14,ADDQ_15,ADDQ_16,ADDQ_17,ADDQ_18,ADDQ_19,ADDQM1,ID_0,ID_1,
   ID_2,ID_3,ID_4,ID_5,ID_6,ID_7,LDSAL_0,LDSAL_1,LDSAL_2,SDASEL,SRCRDL_0,
   SRCRDL_1,SRCRDL_2,UPSLDL;
OUTPUTS	D_0,D_1,D_2,D_3,D_4,D_5,D_6,D_7,SAL_0,SAL_1,SAL_2,SAL_3,SAL_4,SAL_5,
   SAL_6,SAL_7,SAL_8,SAL_9,SAL_10,SAL_11,SAL_12,SAL_13,SAL_14,SAL_15,SAL_16,
   SAL_17,SAL_18,SAL_19,SAM1L,SRCCMP,SSIGN,SWRAP;
LEVEL FUNCTION;
DEFINE

ADDBACK_(ADDBACK) = N1C(ADDBACKL);

/* The load enables for the latches */

SLDM1_(SLDM1L) = AND3A(LDSAL_2,UPSLDL,ADDBLDL);
SLD_0_(SLDL_0) = AND3C(LDSAL_0,UPSLDL,ADDBLDL);
SLD_1_(SLDL_1) = AND2C(LDSAL_1,UPSLDL);
SLD_2_(SLDL_2) = AND2C(LDSAL_2,UPSLDL);

/* The local adder for add back */

LADDM1_(LAQM1,CARRY_0) = HALFADD(SAM1,SA_16);
LADD_0_(LAQ_0,CARRY_1) = FULLADD(SA_8,SA_0,CARRY_0);
LADD_1_(LAQ_1,CARRY_2) = FULLADD(SA_9,SA_1,CARRY_1);
LADD_2_(LAQ_2,CARRY_3) = FULLADD(SA_10,SA_2,CARRY_2);
LADD_3_(LAQ_3,CARRY_4) = FULLADD(SA_11,SA_3,CARRY_3);
LADD_4_(LAQ_4,CARRY_5) = FULLADD(SA_12,SA_4,CARRY_4);
LADD_5_(LAQ_5,CARRY_6) = FULLADD(SA_13,SA_5,CARRY_5);
LADD_6_(LAQ_6,CARRY_7) = FULLADD(SA_14,SA_6,CARRY_6);
LADD_7_(LAQ_7,CARRY_8) = FULLADD(SA_15,SA_7,CARRY_7);

/* Multiplex between the adder output and the data bus */

SDASELL_(SDASELL) = N1B(SDASEL);
ADDSEL_(ADDSEL) = NR2C(SDASELL,ADDBACK);
DATSEL_(DATSEL) = NR2C(SDASEL,ADDBACK);

SMUXM1_(SIM1) = AO11A(ADDBACK,LAQM1,ADDSEL,ADDQM1,DATSEL,ID_7);
SMUX_0_(SI_0) = AO11A(ADDBACK,LAQ_0,ADDSEL,ADDQ_0,DATSEL,ID_0);
SMUX_1_(SI_1) = AO11A(ADDBACK,LAQ_1,ADDSEL,ADDQ_1,DATSEL,ID_1);
SMUX_2_(SI_2) = AO11A(ADDBACK,LAQ_2,ADDSEL,ADDQ_2,DATSEL,ID_2);
SMUX_3_(SI_3) = AO11A(ADDBACK,LAQ_3,ADDSEL,ADDQ_3,DATSEL,ID_3);
SMUX_4_(SI_4) = AO11A(ADDBACK,LAQ_4,ADDSEL,ADDQ_4,DATSEL,ID_4);
SMUX_5_(SI_5) = AO11A(ADDBACK,LAQ_5,ADDSEL,ADDQ_5,DATSEL,ID_5);
SMUX_6_(SI_6) = AO11A(ADDBACK,LAQ_6,ADDSEL,ADDQ_6,DATSEL,ID_6);
SMUX_7_(SI_7) = AO11A(ADDBACK,LAQ_7,ADDSEL,ADDQ_7,DATSEL,ID_7);
SMUX_8_(SI_8) = AO2A(SDASEL,ADDQ_8,SDASELL,ID_0);
SMUX_9_(SI_9) = AO2A(SDASEL,ADDQ_9,SDASELL,ID_1);
SMUX_10_(SI_10) = AO2A(SDASEL,ADDQ_10,SDASELL,ID_2);
SMUX_11_(SI_11) = AO2A(SDASEL,ADDQ_11,SDASELL,ID_3);
SMUX_12_(SI_12) = AO2A(SDASEL,ADDQ_12,SDASELL,ID_4);
SMUX_13_(SI_13) = AO2A(SDASEL,ADDQ_13,SDASELL,ID_5);
SMUX_14_(SI_14) = AO2A(SDASEL,ADDQ_14,SDASELL,ID_6);
SMUX_15_(SI_15) = AO2A(SDASEL,ADDQ_15,SDASELL,ID_7);
SMUX_16_(SI_16) = AO2A(SDASEL,ADDQ_16,SDASELL,ID_0);
SMUX_17_(SI_17) = AO2A(SDASEL,ADDQ_17,SDASELL,ID_1);
SMUX_18_(SI_18) = AO2A(SDASEL,ADDQ_18,SDASELL,ID_2);
SMUX_19_(SI_19) = AO2A(SDASEL,ADDQ_19,SDASELL,ID_3);

/* The address register */

SALATCHM1_(SAM1L,SAM1) = FD1A(SIM1,SLDM1L);
SALATCH_0_(SAL_0,SA_0) = FD1A(SI_0,SLDL_0);
SALATCH_1_(SAL_1,SA_1) = FD1A(SI_1,SLDL_0);
SALATCH_2_(SAL_2,SA_2) = FD1A(SI_2,SLDL_0);
SALATCH_3_(SAL_3,SA_3) = FD1A(SI_3,SLDL_0);
SALATCH_4_(SAL_4,SA_4) = FD1A(SI_4,SLDL_0);
SALATCH_5_(SAL_5,SA_5) = FD1A(SI_5,SLDL_0);
SALATCH_6_(SAL_6,SA_6) = FD1A(SI_6,SLDL_0);
SALATCH_7_(SAL_7,SA_7) = FD1A(SI_7,SLDL_0);
SALATCH_8_(SAL_8,SA_8) = FD1A(SI_8,SLDL_1);
SALATCH_9_(SAL_9,SA_9) = FD1A(SI_9,SLDL_1);
SALATCH_10_(SAL_10,SA_10) = FD1A(SI_10,SLDL_1);
SALATCH_11_(SAL_11,SA_11) = FD1A(SI_11,SLDL_1);
SALATCH_12_(SAL_12,SA_12) = FD1A(SI_12,SLDL_1);
SALATCH_13_(SAL_13,SA_13) = FD1A(SI_13,SLDL_1);
SALATCH_14_(SAL_14,SA_14) = FD1A(SI_14,SLDL_1);
SALATCH_15_(SAL_15,SA_15) = FD1A(SI_15,SLDL_1);
SALATCH_16_(SAL_16,SA_16) = FD1A(SI_16,SLDL_2);
SALATCH_17_(SAL_17,SA_17) = FD1A(SI_17,SLDL_2);
SALATCH_18_(SAL_18,SA_18) = FD1A(SI_18,SLDL_2);
SALATCH_19_(SAL_19,SA_19) = FD1A(SI_19,SLDL_2);

/* The source data comparator select, source address update sign bit, and '
wrap control */

SRCCMP_(SRCCMP,SRCCMPL) = LD2A(ID_4,LDSAL_2);
SWRAP_(SWRAP,SWRAPL) = LD2A(ID_5,LDSAL_2);
SSIGN_(SSIGN,SSIGNL) = LD2A(ID_6,LDSAL_2);

/* Make it readable by the CPU */

SIOINV_0_(SRCRD_0) = N1A(SRCRDL_0);
SIOINV_1_(SRCRD_1) = N1A(SRCRDL_1);
SIOINV_2_(SRCRD_2) = N1A(SRCRDL_2);
SARSEL1_0_(SAR_0) = MUX2(SA_0,SRCRD_0,SA_8,SRCRD_1);
SARSEL1_1_(SAR_1) = MUX2(SA_1,SRCRD_0,SA_9,SRCRD_1);
SARSEL1_2_(SAR_2) = MUX2(SA_2,SRCRD_0,SA_10,SRCRD_1);
SARSEL1_3_(SAR_3) = MUX2(SA_3,SRCRD_0,SA_11,SRCRD_1);
SARSEL1_4_(SAR_4) = MUX2(SA_4,SRCRD_0,SA_12,SRCRD_1);
SARSEL1_5_(SAR_5) = MUX2(SA_5,SRCRD_0,SA_13,SRCRD_1);
SARSEL1_6_(SAR_6) = MUX2(SA_6,SRCRD_0,SA_14,SRCRD_1);
SARSEL1_7_(SAR_7) = MUX2(SA_7,SRCRD_0,SA_15,SRCRD_1);
SARSEL2_0_(SAS_0) = AO2A(SA_16,SRCRD_2,SAR_0,SRCRDL_2);
SARSEL2_1_(SAS_1) = AO2A(SA_17,SRCRD_2,SAR_1,SRCRDL_2);
SARSEL2_2_(SAS_2) = AO2A(SA_18,SRCRD_2,SAR_2,SRCRDL_2);
SARSEL2_3_(SAS_3) = AO2A(SA_19,SRCRD_2,SAR_3,SRCRDL_2);
SARSEL2_4_(SAS_4) = ND2A(SAR_4,SRCRDL_2);
SARSEL2_5_(SAS_5) = ND2A(SAR_5,SRCRDL_2);
SARSEL2_6_(SAS_6) = AO2A(SSIGN,SRCRD_2,SAR_6,SRCRDL_2);
SARSEL2_7_(SAS_7) = AO2A(SAM1,SRCRD_2,SAR_7,SRCRDL_2);

SAREN_(SAREN) = ND3B(SRCRDL_0,SRCRDL_1,SRCRDL_2);
SAPORT_0_(D_0) = BTS5A(SAS_0,SAREN);
SAPORT_1_(D_1) = BTS5A(SAS_1,SAREN);
SAPORT_2_(D_2) = BTS5A(SAS_2,SAREN);
SAPORT_3_(D_3) = BTS5A(SAS_3,SAREN);
SAPORT_4_(D_4) = BTS5A(SAS_4,SAREN);
SAPORT_5_(D_5) = BTS5A(SAS_5,SAREN);
SAPORT_6_(D_6) = BTS5A(SAS_6,SAREN);
SAPORT_7_(D_7) = BTS5A(SAS_7,SAREN);

END MODULE;
END COMPILE;
END;
