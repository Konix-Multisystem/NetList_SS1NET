COMPILE;
DIRECTORY MASTER;
/****************************************************************************
dstareg
19/10/88

Destination Address Register

This register is loaded either when the blitter program is being loaded, this
is given by lddaL[0..2], or when an updated address has been computed, given 
by upddstL.  The updated address may be computed by the adder or given by
addq[0..9].

****************************************************************************/


MODULE DSTAREG;

INPUTS	D_0,D_1,D_2,D_3,D_4,D_5,D_6,D_7,ADDQ_0,ADDQ_1,ADDQ_2,ADDQ_3,ADDQ_4,
   ADDQ_5,ADDQ_6,ADDQ_7,ADDQ_8,ADDQ_9,ADDQ_10,ADDQ_11,ADDQ_12,ADDQ_13,ADDQ_14,
   ADDQ_15,ADDQ_16,ADDQ_17,ADDQ_18,ADDQ_19,ADDQM1,DSTRDL_0,DSTRDL_1,DSTRDL_2,
   ID_0,ID_1,ID_2,ID_3,ID_4,ID_5,ID_6,ID_7,LDDAL_0,LDDAL_1,LDDAL_2,SDASEL,
   UPDDSTL;
OUTPUTS	D_0,D_1,D_2,D_3,D_4,D_5,D_6,D_7,DAL_0,DAL_1,DAL_2,DAL_3,DAL_4,DAL_5,
   DAL_6,DAL_7,DAL_8,DAL_9,DAL_10,DAL_11,DAL_12,DAL_13,DAL_14,DAL_15,DAL_16,
   DAL_17,DAL_18,DAL_19,DAM1L,DSTCMP,DSIGN,DWRAP;
LEVEL FUNCTION;
DEFINE

/* Invert inputs to taste */

SDASELL_(SDASELL) = N1C(SDASEL);

/* The load enables for the latches */

DLD_0_(DLDL_0) = AND2C(LDDAL_0,UPDDSTL);
DLD_1_(DLDL_1) = AND2C(LDDAL_1,UPDDSTL);
DLD_2_(DLDL_2) = AND2C(LDDAL_2,UPDDSTL);

/* Mltiplex between input data and adder output  */

MUXM1_(DIM1) = AO2A(SDASELL,ID_7,SDASEL,ADDQM1);
MUX_0_(DI_0) = AO2A(SDASELL,ID_0,SDASEL,ADDQ_0);
MUX_1_(DI_1) = AO2A(SDASELL,ID_1,SDASEL,ADDQ_1);
MUX_2_(DI_2) = AO2A(SDASELL,ID_2,SDASEL,ADDQ_2);
MUX_3_(DI_3) = AO2A(SDASELL,ID_3,SDASEL,ADDQ_3);
MUX_4_(DI_4) = AO2A(SDASELL,ID_4,SDASEL,ADDQ_4);
MUX_5_(DI_5) = AO2A(SDASELL,ID_5,SDASEL,ADDQ_5);
MUX_6_(DI_6) = AO2A(SDASELL,ID_6,SDASEL,ADDQ_6);
MUX_7_(DI_7) = AO2A(SDASELL,ID_7,SDASEL,ADDQ_7);
MUX_8_(DI_8) = AO2A(SDASELL,ID_0,SDASEL,ADDQ_8);
MUX_9_(DI_9) = AO2A(SDASELL,ID_1,SDASEL,ADDQ_9);
MUX_10_(DI_10) = AO2A(SDASELL,ID_2,SDASEL,ADDQ_10);
MUX_11_(DI_11) = AO2A(SDASELL,ID_3,SDASEL,ADDQ_11);
MUX_12_(DI_12) = AO2A(SDASELL,ID_4,SDASEL,ADDQ_12);
MUX_13_(DI_13) = AO2A(SDASELL,ID_5,SDASEL,ADDQ_13);
MUX_14_(DI_14) = AO2A(SDASELL,ID_6,SDASEL,ADDQ_14);
MUX_15_(DI_15) = AO2A(SDASELL,ID_7,SDASEL,ADDQ_15);
MUX_16_(DI_16) = AO2A(SDASELL,ID_0,SDASEL,ADDQ_16);
MUX_17_(DI_17) = AO2A(SDASELL,ID_1,SDASEL,ADDQ_17);
MUX_18_(DI_18) = AO2A(SDASELL,ID_2,SDASEL,ADDQ_18);
MUX_19_(DI_19) = AO2A(SDASELL,ID_3,SDASEL,ADDQ_19);

/* The address latches */

DA_0_(DAL_0,DA_0) = FD1A(DI_0,DLDL_0);
DA_1_(DAL_1,DA_1) = FD1A(DI_1,DLDL_0);
DA_2_(DAL_2,DA_2) = FD1A(DI_2,DLDL_0);
DA_3_(DAL_3,DA_3) = FD1A(DI_3,DLDL_0);
DA_4_(DAL_4,DA_4) = FD1A(DI_4,DLDL_0);
DA_5_(DAL_5,DA_5) = FD1A(DI_5,DLDL_0);
DA_6_(DAL_6,DA_6) = FD1A(DI_6,DLDL_0);
DA_7_(DAL_7,DA_7) = FD1A(DI_7,DLDL_0);
DA_8_(DAL_8,DA_8) = FD1A(DI_8,DLDL_1);
DA_9_(DAL_9,DA_9) = FD1A(DI_9,DLDL_1);
DA_10_(DAL_10,DA_10) = FD1A(DI_10,DLDL_1);
DA_11_(DAL_11,DA_11) = FD1A(DI_11,DLDL_1);
DA_12_(DAL_12,DA_12) = FD1A(DI_12,DLDL_1);
DA_13_(DAL_13,DA_13) = FD1A(DI_13,DLDL_1);
DA_14_(DAL_14,DA_14) = FD1A(DI_14,DLDL_1);
DA_15_(DAL_15,DA_15) = FD1A(DI_15,DLDL_1);
DA_16_(DAL_16,DA_16) = FD1A(DI_16,DLDL_2);
DA_17_(DAL_17,DA_17) = FD1A(DI_17,DLDL_2);
DA_18_(DAL_18,DA_18) = FD1A(DI_18,DLDL_2);
DA_19_(DAL_19,DA_19) = FD1A(DI_19,DLDL_2);
DAM1_(DAM1L,DAM1) = FD1A(DIM1,DLDL_2);

/* The destination address update sign bit, and wrap control */

DSTCMP_(DSTCMP,DSTCMPL) = LD2A(ID_4,LDDAL_2);
DWRAP_(DWRAP,DWRAPL) = LD2A(ID_5,LDDAL_2);
DSIGN_(DSIGN,DSIGNL) = LD2A(ID_6,LDDAL_2);

/* Make it readable by the CPU */

DIOINV_0_(DSTRD_0) = N1A(DSTRDL_0);
DIOINV_1_(DSTRD_1) = N1A(DSTRDL_1);
DIOINV_2_(DSTRD_2) = N1A(DSTRDL_2);
DARSEL1_0_(DAR_0) = MUX2(DA_0,DSTRD_0,DA_8,DSTRD_1);
DARSEL1_1_(DAR_1) = MUX2(DA_1,DSTRD_0,DA_9,DSTRD_1);
DARSEL1_2_(DAR_2) = MUX2(DA_2,DSTRD_0,DA_10,DSTRD_1);
DARSEL1_3_(DAR_3) = MUX2(DA_3,DSTRD_0,DA_11,DSTRD_1);
DARSEL1_4_(DAR_4) = MUX2(DA_4,DSTRD_0,DA_12,DSTRD_1);
DARSEL1_5_(DAR_5) = MUX2(DA_5,DSTRD_0,DA_13,DSTRD_1);
DARSEL1_6_(DAR_6) = MUX2(DA_6,DSTRD_0,DA_14,DSTRD_1);
DARSEL1_7_(DAR_7) = MUX2(DA_7,DSTRD_0,DA_15,DSTRD_1);
DARSEL2_0_(DAS_0) = AO2A(DA_16,DSTRD_2,DAR_0,DSTRDL_2);
DARSEL2_1_(DAS_1) = AO2A(DA_17,DSTRD_2,DAR_1,DSTRDL_2);
DARSEL2_2_(DAS_2) = AO2A(DA_18,DSTRD_2,DAR_2,DSTRDL_2);
DARSEL2_3_(DAS_3) = AO2A(DA_19,DSTRD_2,DAR_3,DSTRDL_2);
DARSEL2_4_(DAS_4) = ND2A(DAR_4,DSTRDL_2);
DARSEL2_5_(DAS_5) = ND2A(DAR_5,DSTRDL_2);
DARSEL2_6_(DAS_6) = AO2A(DSIGN,DSTRD_2,DAR_6,DSTRDL_2);
DARSEL2_7_(DAS_7) = AO2A(DAM1,DSTRD_2,DAR_7,DSTRDL_2);

DAREN_(DAREN) = ND3A(DSTRDL_0,DSTRDL_1,DSTRDL_2);
DAPORT_0_(D_0) = BTS5A(DAS_0,DAREN);
DAPORT_1_(D_1) = BTS5A(DAS_1,DAREN);
DAPORT_2_(D_2) = BTS5A(DAS_2,DAREN);
DAPORT_3_(D_3) = BTS5A(DAS_3,DAREN);
DAPORT_4_(D_4) = BTS5A(DAS_4,DAREN);
DAPORT_5_(D_5) = BTS5A(DAS_5,DAREN);
DAPORT_6_(D_6) = BTS5A(DAS_6,DAREN);
DAPORT_7_(D_7) = BTS5A(DAS_7,DAREN);

END MODULE;
END COMPILE;
END;
