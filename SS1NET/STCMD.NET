COMPILE;
DIRECTORY MASTER;
/****************************************************************************
stcmd
15/10/88

Blitter command read state machine

Note - that irc[4] is brought out as the command read cycle request, comcrq

****************************************************************************/


MODULE STCMD;

INPUTS	CCLK,CYCEND,ICYCEND,RDCMD,RESET,RUN,SRESET;
OUTPUTS	LDSAL_0,LDSAL_1,LDSAL_2,LDDAL_0,LDDAL_1,LDDAL_2,LDCMPL,LDOUTL,LDMODL,
   COMDN,IRC_4,LDCMDL;
LEVEL FUNCTION;
DEFINE

/* Invert inputs as required */

CYCENDL_(CYCENDL) = N1A(CYCEND);
RESETL_(RESETL) = N1B(RESET);
SRESETL_(SRESETL) = N1A(SRESET);

/* Generate the inputs for bits 4 and 5 */

CMDEGEN_(CMDENDL) = ND4A(RC_3,RCL_2,RCL_1,RCL_0);

RC4T0GEN_(RC4T_0) = ND3A(RCL_4,RCL_5,RUN);
RC4T1GEN_(RC4T_1) = ND3A(RC_4,RCL_5,CMDENDL);
RC4T2GEN_(RC4T_2) = ND3A(RCL_4,RC_5,RDCMD);
RC4T3GEN_(RC4T_3) = ND2A(RC_4,CYCENDL);
RC4GEN_(IRC_4) = ND4A(RC4T_0,RC4T_1,RC4T_2,RC4T_3);

RC5T0GEN_(RC5T_0) = ND2A(RCL_4,RC_5);
RC5T1GEN_(RC5T_1) = ND3A(RC_4,RCL_5,COMDN);
RC5T2GEN_(RC5T_2) = ND3A(RC_4,RC_5,CYCENDL);
RC5GEN_(IRC_5) = ND3A(RC5T_0,RC5T_1,RC5T_2);

/* Generate the inputs for bits 0 to 3, the counter.
This is cleared during the read command state, and allowed to count
during the read operands state at the cycle end, e.g.
Bit0 = /(rc[4] . rc[5]) . ((rc[4] . /rc[5] . cycend) . /rc[0]
			  +(rc[4] . /rc[5] . /cycend) . rc[0])
 */

IRC1GEN_(IRCT_1) = AO2A(RC_0,RC_1,RCL_0,RCL_1);
CRC1GEN_(RCCL_1) = ND2A(RC_0,RC_1);
CRC2GEN_(RCCL_2) = ND2A(RC_2,RCC_1);
RCC1INV_(RCC_1) = N1A(RCCL_1);
RCC2INV_(RCC_2) = N1A(RCCL_2);
IRC2GEN_(IRCT_2) = AO2A(RC_2,RCC_1,RCL_2,RCCL_1);
IRC3GEN_(IRCT_3) = AO2A(RC_3,RCC_2,RCL_3,RCCL_2);
/* The common count control terms */
CNTC_0_(CNTCLR) = NR2A(RCL_4,RCL_5);
CNTC_1_(CNTEN) = NR3A(RCL_4,RC_5,CYCENDL);
CNTC_2_(CNTDIS) = NR3A(RCL_4,RC_5,CYCEND);
/* Generate the counter control bits */
CNTINL_0_(CNTINL_0) = AO2A(CNTEN,RCL_0,CNTDIS,RC_0);
CNTINL_1_(CNTINL_1) = AO2A(CNTEN,IRCT_1,CNTDIS,RC_1);
CNTINL_2_(CNTINL_2) = AO2A(CNTEN,IRCT_2,CNTDIS,RC_2);
CNTINL_3_(CNTINL_3) = AO2A(CNTEN,IRCT_3,CNTDIS,RC_3);
IRC_0_(IRC_0) = NR2A(CNTCLR,CNTINL_0);
IRC_1_(IRC_1) = NR2A(CNTCLR,CNTINL_1);
IRC_2_(IRC_2) = NR2A(CNTCLR,CNTINL_2);
IRC_3_(IRC_3) = NR2A(CNTCLR,CNTINL_3);

/* The state latches */

RCLATCH_0_(RC_0,RCL_0) = FD2A(IRC_0,CCLK,SRESETL);
RCLATCH_1_(RC_1,RCL_1) = FD2A(IRC_1,CCLK,SRESETL);
RCLATCH_2_(RC_2,RCL_2) = FD2A(IRC_2,CCLK,SRESETL);
RCLATCH_3_(RC_3,RCL_3) = FD2A(IRC_3,CCLK,SRESETL);
RCLATCH_4_(RC_4,RCL_4) = FD2A(IRC_4,CCLK,SRESETL);
RCLATCH_5_(RC_5,RCL_5) = FD2A(IRC_5,CCLK,SRESETL);

/* Decodes from the state */

COMDGEN_(COMDN) = NR2A(CMDENDL,CYCENDL);

/* Source address load */

LDSA0T_(ILDSAL_0) = ND6A(RCL_0,RCL_1,RCL_2,RCL_3,RC_4,ICYCEND);
LDSA1T_(ILDSAL_1) = ND5A(RC_0,RCL_1,RCL_2,RCL_3,ICYCEND);
LDSA2T_(ILDSAL_2) = ND5A(RCL_0,RC_1,RCL_2,RCL_3,ICYCEND);
LDSALT_0_(LDSATL_0,LDSAT_0) = FD4A(ILDSAL_0,CCLK,RESETL);
LDSALT_1_(LDSATL_1,LDSAT_1) = FD4A(ILDSAL_1,CCLK,RESETL);
LDSALT_2_(LDSATL_2,LDSAT_2) = FD4A(ILDSAL_2,CCLK,RESETL);
LDSA_0_(LDSAL_0) = NR2A(LDSAT_0,RESET);
LDSA_1_(LDSAL_1) = NR2A(LDSAT_1,RESET);
LDSA_2_(LDSAL_2) = NR2A(LDSAT_2,RESET);

/* Destination address load */

LDDA0T_(ILDDAL_0) = ND5A(RC_0,RC_1,RCL_2,RCL_3,ICYCEND);
LDDA1T_(ILDDAL_1) = ND4A(RCL_0,RCL_1,RC_2,ICYCEND);
LDDA2T_(ILDDAL_2) = ND4A(RC_0,RCL_1,RC_2,ICYCEND);
LDDAL_0_(LDDATL_0,LDDAT_0) = FD4A(ILDDAL_0,CCLK,RESETL);
LDDAL_1_(LDDATL_1,LDDAT_1) = FD4A(ILDDAL_1,CCLK,RESETL);
LDDAL_2_(LDDATL_2,LDDAT_2) = FD4A(ILDDAL_2,CCLK,RESETL);
LDDA_0_(LDDAL_0) = NR2A(LDDAT_0,RESET);
LDDA_1_(LDDAL_1) = NR2A(LDDAT_1,RESET);
LDDA_2_(LDDAL_2) = NR2A(LDDAT_2,RESET);

/* Other load signals */

LDCMDGEN_(ILDCMDL) = ND3A(RC_4,RC_5,ICYCEND);
LDCMDL_(LDCMDTL,LDCMDT) = FD4A(ILDCMDL,CCLK,RESETL);
LDCMDG_(LDCMDL) = NR2A(RESET,LDCMDT);

LDMODGEN_(ILDMODL) = ND4A(RCL_0,RC_1,RC_2,ICYCEND);
LDMODL_(LDMODTL,LDMODT) = FD4A(ILDMODL,CCLK,RESETL);
LDMODG_(LDMODL) = NR2A(LDMODT,RESET);

LDCMPGEN_(ILDCMPL) = ND4A(RC_0,RC_1,RC_2,ICYCEND);
LDCMPL_(LDCMPTL,LDCMPT) = FD4A(ILDCMPL,CCLK,RESETL);
LDCMPG_(LDCMPL) = NR2A(RESET,LDCMPT);

LDOUTGEN_(ILDOUTL) = ND3A(RCL_0,RC_3,ICYCEND);
LDOUTL_(LDOUTTL,LDOUTT) = FD4A(ILDOUTL,CCLK,RESETL);
LDOUTG_(LDOUTL) = NR2A(RESET,LDOUTT);

END MODULE;
END COMPILE;
END;
