COMPILE;
DIRECTORY MASTER;

MODULE PRAM;

INPUTS	PD_0,PD_1,PD_2,PD_3,PD_4,PD_5,PD_6,PD_7,PD_8,PD_9,PD_10,PD_11,PD_12,
   PD_13,PD_14,PD_15,D_0,D_1,D_2,D_3,D_4,D_5,D_6,D_7,A_0,A_9,A_10,DCSL,RDL,WRL,
   RUN,CLK,DQCLK;
OUTPUTS	PD_0,PD_1,PD_2,PD_3,PD_4,PD_5,PD_6,PD_7,PD_8,PD_9,PD_10,PD_11,PD_12,
   PD_13,PD_14,PD_15,D_0,D_1,D_2,D_3,D_4,D_5,D_6,D_7,HPCWRL,PRAMEN,PRAMWR;
LEVEL FUNCTION;
DEFINE

PDL_0_(PDL_0) = N1A(PD_0);
PDL_1_(PDL_1) = N1A(PD_1);
PDL_2_(PDL_2) = N1A(PD_2);
PDL_3_(PDL_3) = N1A(PD_3);
PDL_4_(PDL_4) = N1A(PD_4);
PDL_5_(PDL_5) = N1A(PD_5);
PDL_6_(PDL_6) = N1A(PD_6);
PDL_7_(PDL_7) = N1A(PD_7);
PDL_8_(PDL_8) = N1A(PD_8);
PDL_9_(PDL_9) = N1A(PD_9);
PDL_10_(PDL_10) = N1A(PD_10);
PDL_11_(PDL_11) = N1A(PD_11);
PDL_12_(PDL_12) = N1A(PD_12);
PDL_13_(PDL_13) = N1A(PD_13);
PDL_14_(PDL_14) = N1A(PD_14);
PDL_15_(PDL_15) = N1A(PD_15);

PREAD_0_(D_0) = BTS5A(PDL_0,PRD0);
PREAD_1_(D_1) = BTS5A(PDL_1,PRD0);
PREAD_2_(D_2) = BTS5A(PDL_2,PRD0);
PREAD_3_(D_3) = BTS5A(PDL_3,PRD0);
PREAD_4_(D_4) = BTS5A(PDL_4,PRD0);
PREAD_5_(D_5) = BTS5A(PDL_5,PRD0);
PREAD_6_(D_6) = BTS5A(PDL_6,PRD0);
PREAD_7_(D_7) = BTS5A(PDL_7,PRD0);
PREAD_8_(D_0) = BTS5A(PDL_8,PRD1);
PREAD_9_(D_1) = BTS5A(PDL_9,PRD1);
PREAD_10_(D_2) = BTS5A(PDL_10,PRD1);
PREAD_11_(D_3) = BTS5A(PDL_11,PRD1);
PREAD_12_(D_4) = BTS5A(PDL_12,PRD1);
PREAD_13_(D_5) = BTS5A(PDL_13,PRD1);
PREAD_14_(D_6) = BTS5A(PDL_14,PRD1);
PREAD_15_(D_7) = BTS5A(PDL_15,PRD1);

PWRIT_0_(PD_0) = BTS5A(LOB_0,PRAMENL);
PWRIT_1_(PD_1) = BTS5A(LOB_1,PRAMENL);
PWRIT_2_(PD_2) = BTS5A(LOB_2,PRAMENL);
PWRIT_3_(PD_3) = BTS5A(LOB_3,PRAMENL);
PWRIT_4_(PD_4) = BTS5A(LOB_4,PRAMENL);
PWRIT_5_(PD_5) = BTS5A(LOB_5,PRAMENL);
PWRIT_6_(PD_6) = BTS5A(LOB_6,PRAMENL);
PWRIT_7_(PD_7) = BTS5A(LOB_7,PRAMENL);
DL_0_(DL_0) = N1A(D_0);
DL_1_(DL_1) = N1A(D_1);
DL_2_(DL_2) = N1A(D_2);
DL_3_(DL_3) = N1A(D_3);
DL_4_(DL_4) = N1A(D_4);
DL_5_(DL_5) = N1A(D_5);
DL_6_(DL_6) = N1A(D_6);
DL_7_(DL_7) = N1A(D_7);
PWRIT_8_(PD_8) = BTS5A(DL_0,PRAMENL);
PWRIT_9_(PD_9) = BTS5A(DL_1,PRAMENL);
PWRIT_10_(PD_10) = BTS5A(DL_2,PRAMENL);
PWRIT_11_(PD_11) = BTS5A(DL_3,PRAMENL);
PWRIT_12_(PD_12) = BTS5A(DL_4,PRAMENL);
PWRIT_13_(PD_13) = BTS5A(DL_5,PRAMENL);
PWRIT_14_(PD_14) = BTS5A(DL_6,PRAMENL);
PWRIT_15_(PD_15) = BTS5A(DL_7,PRAMENL);

/* These buffers are only enabled during STOP. */

HPCWRL_(HPCWRL) = OR2A(RUN,PRSEL);
PRSELR_(PRSELR) = NR4A(A_9,AL_10,DCSL,RDL);
PRSELW_(PRSELW) = NR4A(A_9,AL_10,DCSL,WRL);
PRSEL_(PRSEL) = NR2B(PRSELR,PRSELW);
PRD0_(PRD0) = NR3C(A_0,PRSEL,RDL);
PRD1_(PRD1) = NR3C(AL_0,PRSEL,RDL);

PWR0_(PWR0) = NR5B(RUN,A_0,PRSEL,DQCLK,WRL);
PRAMWR_(PRAMWR) = NR5A(RUN,AL_0,PRSEL,DQCLK,WRL);


AL_0_(AL_0) = N1A(A_0);
AL_10_(AL_10) = N1A(A_10);

/* RAM output enable is on always except when being written by the host during     STOP */
PRAMENL_(PRAMENL) = NR6B(AL_0,A_9,AL_10,DCSL,WRL,RUN);
PRAMEN_(PRAMEN) = N1A(PRAMENL);
/* It is necessary to have a TLATCH in between the host and the low byte of
   RAM as it is only possible to write 8 bits at a time. This assumes that
   the programs are loaded LOW BYTE FIRST, HIGH BYTE LAST. RAM is updated when
   the high byte is written. Programmers please
   note. */

LOBUF_0_(LOB_0,LOBL_0) = LD1A(DL_0,PWR0);
LOBUF_1_(LOB_1,LOBL_1) = LD1A(DL_1,PWR0);
LOBUF_2_(LOB_2,LOBL_2) = LD1A(DL_2,PWR0);
LOBUF_3_(LOB_3,LOBL_3) = LD1A(DL_3,PWR0);
LOBUF_4_(LOB_4,LOBL_4) = LD1A(DL_4,PWR0);
LOBUF_5_(LOB_5,LOBL_5) = LD1A(DL_5,PWR0);
LOBUF_6_(LOB_6,LOBL_6) = LD1A(DL_6,PWR0);
LOBUF_7_(LOB_7,LOBL_7) = LD1A(DL_7,PWR0);




END MODULE;

END COMPILE;
END;
