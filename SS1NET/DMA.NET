COMPILE;
DIRECTORY MASTER;

MODULE DMA;

INPUTS	A_0,A_1,A_2,A_3,A_4,A_5,A_6,A_7,A_8,A_9,A_10,A_11,A_12,A_13,A_14,A_15,
   A_16,A_17,A_18,A_19,D_0,D_1,D_2,D_3,D_4,D_5,D_6,D_7,D_8,D_9,D_10,D_11,D_12,
   D_13,D_14,D_15,DDB_0,DDB_1,DDB_2,DDB_3,DDB_4,DDB_5,DDB_6,DDB_7,DDB_8,DDB_9,DDB_10,DDB_11,
   DDB_12,DDB_13,DDB_14,DDB_15,DMA0WRL,DMA0RDL,DMA1WRL,DMA1RDL,DMDWRL,DMDRDL,
   DSPBAKL,WAITL,RUN,RESETL,CLK,DQCLK;
OUTPUTS	A_0,A_1,A_2,A_3,A_4,A_5,A_6,A_7,A_8,A_9,A_10,A_11,A_12,A_13,A_14,A_15,
   A_16,A_17,A_18,A_19,D_0,D_1,D_2,D_3,D_4,D_5,D_6,D_7,D_8,D_9,D_10,D_11,D_12,
   D_13,D_14,D_15,DD_0,DD_1,DD_2,DD_3,DD_4,DD_5,DD_6,DD_7,DD_8,DD_9,DD_10,DD_11,
   DD_12,DD_13,DD_14,DD_15,DSPBRQL,MREQ,RD,WR,WORD;
LEVEL FUNCTION;
DEFINE

 /* The data register */

DMD_0_(DMD_0,DMDL_0) = LD1A(DIN_0,DMLD_0);
DMD_1_(DMD_1,DMDL_1) = LD1A(DIN_1,DMLD_0);
DMD_2_(DMD_2,DMDL_2) = LD1A(DIN_2,DMLD_0);
DMD_3_(DMD_3,DMDL_3) = LD1A(DIN_3,DMLD_0);
DMD_4_(DMD_4,DMDL_4) = LD1A(DIN_4,DMLD_0);
DMD_5_(DMD_5,DMDL_5) = LD1A(DIN_5,DMLD_0);
DMD_6_(DMD_6,DMDL_6) = LD1A(DIN_6,DMLD_0);
DMD_7_(DMD_7,DMDL_7) = LD1A(DIN_7,DMLD_0);
DMD_8_(DMD_8,DMDL_8) = LD1A(DIN_8,DMLD_1);
DMD_9_(DMD_9,DMDL_9) = LD1A(DIN_9,DMLD_1);
DMD_10_(DMD_10,DMDL_10) = LD1A(DIN_10,DMLD_1);
DMD_11_(DMD_11,DMDL_11) = LD1A(DIN_11,DMLD_1);
DMD_12_(DMD_12,DMDL_12) = LD1A(DIN_12,DMLD_1);
DMD_13_(DMD_13,DMDL_13) = LD1A(DIN_13,DMLD_1);
DMD_14_(DMD_14,DMDL_14) = LD1A(DIN_14,DMLD_1);
DMD_15_(DMD_15,DMDL_15) = LD1A(DIN_15,DMLD_1);

/* Loading of this register is defined as follows:
   From the DSP side dmdwrL 
   From the host side only during state 3 of DMAMC,
   Load the low byte IF byte=0 OR If LOHI=0 */

LOBYTE_(LOBYTE) = ND2A(BYTE,LOHI);
HIBYTE_(HIBYTE) = ND2A(BYTE,LOHIL);

HHILDL_(HHILDL) = ND4A(DMC_0,DMC_1,HIBYTE,RDWR);
HLOLDL_(HLOLDL) = ND4A(DMC_0,DMC_1,LOBYTE,RDWR);
DMHILDL_(DMHILDL) = AND2A(HHILDL,DMDWRL);
DMLOLDL_(DMLOLDL) = AND2A(HLOLDL,DMDWRL);

DMLD_0_(DMLD_0) = NR2B(DMLOLDL,DQCLK);
DMLD_1_(DMLD_1) = NR2B(DMHILDL,DQCLK);


/* The mux preceding the data register */

DIN_0_(DIN_0) = MUX(D_0,DSELL_0,DDB_0,DSEL_0);
DIN_1_(DIN_1) = MUX(D_1,DSELL_0,DDB_1,DSEL_0);
DIN_2_(DIN_2) = MUX(D_2,DSELL_0,DDB_2,DSEL_0);
DIN_3_(DIN_3) = MUX(D_3,DSELL_0,DDB_3,DSEL_0);
DIN_4_(DIN_4) = MUX(D_4,DSELL_0,DDB_4,DSEL_0);
DIN_5_(DIN_5) = MUX(D_5,DSELL_0,DDB_5,DSEL_0);
DIN_6_(DIN_6) = MUX(D_6,DSELL_0,DDB_6,DSEL_0);
DIN_7_(DIN_7) = MUX(D_7,DSELL_0,DDB_7,DSEL_0);
DIN_8_(DIN_8) = MUX3(D_8,DDB_8,D_0,DSEL_0,DSEL_1);
DIN_9_(DIN_9) = MUX3(D_9,DDB_9,D_1,DSEL_0,DSEL_1);
DIN_10_(DIN_10) = MUX3(D_10,DDB_10,D_2,DSEL_0,DSEL_1);
DIN_11_(DIN_11) = MUX3(D_11,DDB_11,D_3,DSEL_0,DSEL_1);
DIN_12_(DIN_12) = MUX3(D_12,DDB_12,D_4,DSEL_0,DSEL_1);
DIN_13_(DIN_13) = MUX3(D_13,DDB_13,D_5,DSEL_0,DSEL_1);
DIN_14_(DIN_14) = MUX3(D_14,DDB_14,D_6,DSEL_0,DSEL_1);
DIN_15_(DIN_15) = MUX3(D_15,DDB_15,D_7,DSEL_0,DSEL_1);
/* Selection for this input is made by the state machine, dmdwrL, lohi and byte:

	state m/c  dmdwrL  lohi  byte  rdwr     dsel[0..1]

	   3         x      x     1     1           0
	   3         x      0     0     1           0
	   3         x      1     1     1           2
	not3         0      x     x     x           1		*/

DSEL_0_(DSEL_0) = ND3A(DMC_0,DMC_1,RDWR);
DSELL_0_(DSELL_0) = N1B(DSEL_0);
DSEL_1_(DSEL_1) = AND4B(DSELL_0,LOHI,BYTE,RDWR);


/* The register may be enabled onto the host or DSP buses */


DHOST_0_(D_0) = BTS5B(DMDL_0,DH_0);
DHOST_1_(D_1) = BTS5B(DMDL_1,DH_0);
DHOST_2_(D_2) = BTS5B(DMDL_2,DH_0);
DHOST_3_(D_3) = BTS5B(DMDL_3,DH_0);
DHOST_4_(D_4) = BTS5B(DMDL_4,DH_0);
DHOST_5_(D_5) = BTS5B(DMDL_5,DH_0);
DHOST_6_(D_6) = BTS5B(DMDL_6,DH_0);
DHOST_7_(D_7) = BTS5B(DMDL_7,DH_0);
DHOST_8_(D_8) = BTS5B(DMDL_8,DH_1);
DHOST_9_(D_9) = BTS5B(DMDL_9,DH_1);
DHOST_10_(D_10) = BTS5B(DMDL_10,DH_1);
DHOST_11_(D_11) = BTS5B(DMDL_11,DH_1);
DHOST_12_(D_12) = BTS5B(DMDL_12,DH_1);
DHOST_13_(D_13) = BTS5B(DMDL_13,DH_1);
DHOST_14_(D_14) = BTS5B(DMDL_14,DH_1);
DHOST_15_(D_15) = BTS5B(DMDL_15,DH_1);
DHSWAP_0_(D_0) = BTS5B(DMDL_8,DH_2);
DHSWAP_1_(D_1) = BTS5B(DMDL_9,DH_2);
DHSWAP_2_(D_2) = BTS5B(DMDL_10,DH_2);
DHSWAP_3_(D_3) = BTS5B(DMDL_11,DH_2);
DHSWAP_4_(D_4) = BTS5B(DMDL_12,DH_2);
DHSWAP_5_(D_5) = BTS5B(DMDL_13,DH_2);
DHSWAP_6_(D_6) = BTS5B(DMDL_14,DH_2);
DHSWAP_7_(D_7) = BTS5B(DMDL_15,DH_2);

DDEN_0_(DD_0) = BTS5B(DMDL_0,DMDRD);
DDEN_1_(DD_1) = BTS5B(DMDL_1,DMDRD);
DDEN_2_(DD_2) = BTS5B(DMDL_2,DMDRD);
DDEN_3_(DD_3) = BTS5B(DMDL_3,DMDRD);
DDEN_4_(DD_4) = BTS5B(DMDL_4,DMDRD);
DDEN_5_(DD_5) = BTS5B(DMDL_5,DMDRD);
DDEN_6_(DD_6) = BTS5B(DMDL_6,DMDRD);
DDEN_7_(DD_7) = BTS5B(DMDL_7,DMDRD);
DDEN_8_(DD_8) = BTS5B(DMDL_8,DMDRD);
DDEN_9_(DD_9) = BTS5B(DMDL_9,DMDRD);
DDEN_10_(DD_10) = BTS5B(DMDL_10,DMDRD);
DDEN_11_(DD_11) = BTS5B(DMDL_11,DMDRD);
DDEN_12_(DD_12) = BTS5B(DMDL_12,DMDRD);
DDEN_13_(DD_13) = BTS5B(DMDL_13,DMDRD);
DDEN_14_(DD_14) = BTS5B(DMDL_14,DMDRD);
DDEN_15_(DD_15) = BTS5B(DMDL_15,DMDRD);
DMDRD_(DMDRD) = B1A(DMDRDL);

/* The data bus should be driven as long as HOLDA is active and READ is not.
   The enable signals for these drivers are: 

	dspbak  rd1L  lohi byte        dh[0]  dh[1]  dh[2]
	  0	x      x    x           0      0      0
	  1     0      x    x           0      0      0
	  1     1      x    0		1      1      0
	  1     1      0    1           1      1      0
	  1     1      1    1           0      1      1	

   It turns out that the internal data bus should be driven  by the dsp 
   during DMA (ie when the dsp is bus master) only when it wishes to write 
   host RAM. Change the rd1L signal for wr */ 

HOLDA_(DSPBAK) = B1A(DSPBAKL);
WAIT_(WAIT) = N1A(WAITL);
DH0_1_(DH0_1) = ND3A(DSPBAK,WR,BYTEL);
DH0_2_(DH0_2) = ND4A(DSPBAK,WR,LOHIL,BYTE);
DH_0_(DH_0) = ND2B(DH0_1,DH0_2);

DH_1_(DH_1) = AND2B(DSPBAK,WR);

DH_2_(DH_2) = AND4B(DSPBAK,WR,LOHI,BYTE);


/* The address registers */


DMA0_0_(DMA_0,DMAL_0) = LD1A(DDB_0,DMA0WR);
DMA0_1_(DMA_1,DMAL_1) = LD1A(DDB_1,DMA0WR);
DMA0_2_(DMA_2,DMAL_2) = LD1A(DDB_2,DMA0WR);
DMA0_3_(DMA_3,DMAL_3) = LD1A(DDB_3,DMA0WR);
DMA0_4_(DMA_4,DMAL_4) = LD1A(DDB_4,DMA0WR);
DMA0_5_(DMA_5,DMAL_5) = LD1A(DDB_5,DMA0WR);
DMA0_6_(DMA_6,DMAL_6) = LD1A(DDB_6,DMA0WR);
DMA0_7_(DMA_7,DMAL_7) = LD1A(DDB_7,DMA0WR);
DMA0_8_(DMA_8,DMAL_8) = LD1A(DDB_8,DMA0WR);
DMA0_9_(DMA_9,DMAL_9) = LD1A(DDB_9,DMA0WR);
DMA0_10_(DMA_10,DMAL_10) = LD1A(DDB_10,DMA0WR);
DMA0_11_(DMA_11,DMAL_11) = LD1A(DDB_11,DMA0WR);
DMA0_12_(DMA_12,DMAL_12) = LD1A(DDB_12,DMA0WR);
DMA0_13_(DMA_13,DMAL_13) = LD1A(DDB_13,DMA0WR);
DMA0_14_(DMA_14,DMAL_14) = LD1A(DDB_14,DMA0WR);
DMA0_15_(DMA_15,DMAL_15) = LD1A(DDB_15,DMA0WR);
DMA0WR_(DMA0WR) = NR2C(DMA0WRL,DQCLK);
DMA1_0_(DMA_16,DMAL_16) = LD1A(DDB_0,DMA1WR);
DMA1_1_(DMA_17,DMAL_17) = LD1A(DDB_1,DMA1WR);
DMA1_2_(DMA_18,DMAL_18) = LD1A(DDB_2,DMA1WR);
DMA1_3_(DMA_19,DMAL_19) = LD1A(DDB_3,DMA1WR);
DMA1WR_(DMA1WR) = NR2B(DMA1WRL,DQCLK);

LOHI_(LOHI,LOHIL) = LD1A(DDB_8,DMA1WR);
BYTE_(BYTE,BYTEL) = LD1A(DDB_9,DMA1WR);
RDWR_(RDWR,WRRD) = LD1A(DDB_10,DMA1WR);
HOLD_(HOLD,HOLDL) = LD1A(DDB_11,DMA1WR);
DSPBRQL_(DSPBRQL) = ND2A(HOLD,RUN);

/* These may also be enabled onto the host or DSP buses */

AHOST_0_(A_0) = BTS5B(DMAL_0,DSPBAK);
AHOST_1_(A_1) = BTS5B(DMAL_1,DSPBAK);
AHOST_2_(A_2) = BTS5B(DMAL_2,DSPBAK);
AHOST_3_(A_3) = BTS5B(DMAL_3,DSPBAK);
AHOST_4_(A_4) = BTS5B(DMAL_4,DSPBAK);
AHOST_5_(A_5) = BTS5B(DMAL_5,DSPBAK);
AHOST_6_(A_6) = BTS5B(DMAL_6,DSPBAK);
AHOST_7_(A_7) = BTS5B(DMAL_7,DSPBAK);
AHOST_8_(A_8) = BTS5B(DMAL_8,DSPBAK);
AHOST_9_(A_9) = BTS5B(DMAL_9,DSPBAK);
AHOST_10_(A_10) = BTS5B(DMAL_10,DSPBAK);
AHOST_11_(A_11) = BTS5B(DMAL_11,DSPBAK);
AHOST_12_(A_12) = BTS5B(DMAL_12,DSPBAK);
AHOST_13_(A_13) = BTS5B(DMAL_13,DSPBAK);
AHOST_14_(A_14) = BTS5B(DMAL_14,DSPBAK);
AHOST_15_(A_15) = BTS5B(DMAL_15,DSPBAK);
AHOST_16_(A_16) = BTS5B(DMAL_16,DSPBAK);
AHOST_17_(A_17) = BTS5B(DMAL_17,DSPBAK);
AHOST_18_(A_18) = BTS5B(DMAL_18,DSPBAK);
AHOST_19_(A_19) = BTS5B(DMAL_19,DSPBAK);
DMA0RD_0_(DD_0) = BTS5B(DMAL_0,DMA0RD);
DMA0RD_1_(DD_1) = BTS5B(DMAL_1,DMA0RD);
DMA0RD_2_(DD_2) = BTS5B(DMAL_2,DMA0RD);
DMA0RD_3_(DD_3) = BTS5B(DMAL_3,DMA0RD);
DMA0RD_4_(DD_4) = BTS5B(DMAL_4,DMA0RD);
DMA0RD_5_(DD_5) = BTS5B(DMAL_5,DMA0RD);
DMA0RD_6_(DD_6) = BTS5B(DMAL_6,DMA0RD);
DMA0RD_7_(DD_7) = BTS5B(DMAL_7,DMA0RD);
DMA0RD_8_(DD_8) = BTS5B(DMAL_8,DMA0RD);
DMA0RD_9_(DD_9) = BTS5B(DMAL_9,DMA0RD);
DMA0RD_10_(DD_10) = BTS5B(DMAL_10,DMA0RD);
DMA0RD_11_(DD_11) = BTS5B(DMAL_11,DMA0RD);
DMA0RD_12_(DD_12) = BTS5B(DMAL_12,DMA0RD);
DMA0RD_13_(DD_13) = BTS5B(DMAL_13,DMA0RD);
DMA0RD_14_(DD_14) = BTS5B(DMAL_14,DMA0RD);
DMA0RD_15_(DD_15) = BTS5B(DMAL_15,DMA0RD);
DMA1RD_0_(DD_0) = BTS5B(DMAL_16,DMA1RD);
DMA1RD_1_(DD_1) = BTS5B(DMAL_17,DMA1RD);
DMA1RD_2_(DD_2) = BTS5B(DMAL_18,DMA1RD);
DMA1RD_3_(DD_3) = BTS5B(DMAL_19,DMA1RD);
DMA1RD_8_(DD_8) = BTS5B(LOHIL,DMA1RD);
DMA1RD_9_(DD_9) = BTS5B(BYTEL,DMA1RD);
DMA1RD_10_(DD_10) = BTS5B(WRRD,DMA1RD);
DMA1RD_11_(DD_11) = BTS5B(HOLDL,DMA1RD);

DMA0RD_(DMA0RD) = B1A(DMA0RDL);
DMA1RD_(DMA1RD) = N1B(DMA1RDL);


/* Finally the memory control signals themselves */
/* Mreq, rd, wr and word are enabled asynchronously on HOLDA */
/* Mreq, rd, wr and word are asserted during state m/c state 2.
   Mreq is de-asserted during state 3 */

MREQ_(MREQ) = NR2A(MREQL,DSPBAKL);

RD_(RD) = NR3B(WRRD,ST23L,DSPBAKL);
WR_(WR) = NR3B(RDWR,ST23L,DSPBAKL);
WORD_(WORD) = NR3B(BYTE,ST23L,DSPBAKL);
MACHINE_(DMC_0,DMC_1,DMCL_0,DMCL_1,ST23L,MREQL) = DMAMC(DMA0WRL,DSPBAK,DSPBAKL,
   WAIT,CLK,RESETL);


END MODULE;

MODULE DMAMC;

INPUTS	DMA0WRL,DSPBAK,DSPBAKL,WAIT,CLK,RESETL;
OUTPUTS	DMC_0,DMC_1,DMCL_0,DMCL_1,ST23L,MREQL;
LEVEL FUNCTION;
DEFINE

DMC_0_(DMC_0,DMCL_0) = FD2A(D_0,CLK,RESETL);
DMC_1_(DMC_1,DMCL_1) = FD2A(D_1,CLK,RESETL);

D_0_(D_0) = NR4A(DMCL_1,DMC_0,DSPBAKL,WAIT);
D_1_(D_1) = ND3A(D_2,D_3,D_4);
D_2_(D_2) = ND3A(DMCL_1,DSPBAK,DMA0WR);
D_3_(D_3) = ND3A(DMC_0,DSPBAK,DMA0WR);
D_4_(D_4) = ND3A(DMC_1,DMCL_0,DSPBAK);

DMA0WR_(DMA0WR) = N1A(DMA0WRL);
DL_1_(DL_1) = N1A(D_1);
/* Decode state 2 during which MREQ must be active */

MRQU_(MRQU) = NR2A(DL_1,D_0);
MREQL_(MREQ,MREQL) = FD2A(MRQU,CLK,RESETL);

/* The other signals must be active during states 2 AND 3 */

ST23U_(ST23U) = OR2A(D_0,D_1);
ST23_(ST23,ST23L) = FD2A(ST23U,CLK,RESETL);
END MODULE;

END COMPILE;
END;
